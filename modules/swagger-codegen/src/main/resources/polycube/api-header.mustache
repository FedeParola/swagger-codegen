{{>licenseInfo}}

/* Do not edit this file manually */

{{#operations}}/*
* {{classname}}.h
*
{{!! * {{description}}
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "{{classVarName}}"

{{{defaultInclude}}}
#include <polycube/services/http_router.h>
#include <polycube/services/management_interface.h>
#include <vector>

{{#imports}}{{{import}}}
{{/imports}}

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};
using namespace polycube::service;

class {{declspec}} {{classname}} : public ManagementInterface {
 public:
  {{classname}}();
  virtual ~{{classname}}() {};

  const std::string base = "{{basePathWithoutHost}}" + std::string(POLYCUBE_SERVICE_NAME) + "/";

 protected:
  void setup_routes();
  void control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) override;

  {{#operation}}
  void {{operationIdSnakeCase}}_handler(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  {{/operation}}

  {{#operation}}
  {{#vendorExtensions.x-needs-help}}
  void {{operationIdSnakeCase}}_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  {{/vendorExtensions.x-needs-help}}
  {{/operation}}

  {{#operation}}
  {{#vendorExtensions.x-is-yang-action}}
  void {{operationIdSnakeCase}}_help(const polycube::service::Rest::Request &request, polycube::service::HttpHandleResponse &response);
  {{/vendorExtensions.x-is-yang-action}}
  {{/operation}}

  polycube::service::Rest::Router router;

  {{#operation}}
  /// <summary>
  /// {{summary}}
  /// </summary>
  /// <remarks>
  /// {{notes}}
  /// </remarks>
  {{#allParams}}
  /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
  {{/allParams}}
  virtual {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationIdSnakeCase}}({{#allParams}}const {{{dataType}}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) = 0;
  {{#vendorExtensions.x-is-list}}
  {{^bodyParams}}
  {{#responses}}
  {{^primitiveType}}
  virtual std::vector<nlohmann::fifo_map<std::string, std::string>> {{operationIdSnakeCase}}_get_list({{#allParams}}const {{{dataType}}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) = 0;
  {{/primitiveType}}
  {{/responses}}
  {{/bodyParams}}
  {{/vendorExtensions.x-is-list}}
  {{/operation}}
};

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
