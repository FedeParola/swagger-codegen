{{>licenseInfo}}

/* Do not edit this file manually */

{{#operations}}/*
* {{classname}}Impl.h
*
*{{#description}} {{description}}{{/description}}
*/

#pragma once

{{{defaultInclude}}}
#include <memory>
#include <map>
#include <mutex>
#include "../{{baseName}}.h"

{{#imports}}{{{import}}}
{{/imports}}

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

namespace {{classname}}Impl {
  {{#operation}}
  {{^vendorExtensions.x-is-base-datamodel}}
  {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationIdSnakeCase}}({{#allParams}}const {{{dataType}}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
  {{/vendorExtensions.x-is-base-datamodel}}
  {{/operation}}

  /* help related */
  {{#operation}}
  {{#vendorExtensions.x-needs-help}}
  {{^vendorExtensions.x-is-base-datamodel}}
  {{!^vendorExtensions.x-has-default-impl}}
  {{#vendorExtensions.x-is-list}}
  std::vector<nlohmann::fifo_map<std::string, std::string>> {{operationIdSnakeCase}}_get_list({{#allParams}}const {{{dataType}}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
  {{/vendorExtensions.x-is-list}}
  {{!/vendorExtensions.x-has-default-impl}}
  {{/vendorExtensions.x-is-base-datamodel}}
  {{/vendorExtensions.x-needs-help}}
  {{/operation}}

}
{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
