{{>licenseInfo}}

/* Do not edit this file manually */

{{#models}}{{#model}}

#include "{{classname}}JsonObject.h"
#include <regex>

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{classname}}JsonObject::{{classname}}JsonObject() {
  {{#vars}}
  {{^vendorExtensions.x-is-base-datamodel}}
  {{^isListContainer}}
  {{#isPrimitiveType}}
  {{#vendorExtensions.x-has-default-value}}
  m_{{name}} = {{{defaultValue}}};
  m_{{name}}IsSet = true;
  {{/vendorExtensions.x-has-default-value}}
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  m_{{name}}IsSet = false;
  {{/isPrimitiveType}}
  {{^vendorExtensions.x-has-default-value}}
  m_{{name}}IsSet = false;
  {{/vendorExtensions.x-has-default-value}}
  {{/isListContainer}}
  {{#isListContainer}}
  m_{{name}}IsSet = false;
  {{/isListContainer}}
  {{/vendorExtensions.x-is-base-datamodel}}
  {{/vars}}
}

{{classname}}JsonObject::{{classname}}JsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  {{#vars}}
  {{^vendorExtensions.x-is-base-datamodel}}
  m_{{name}}IsSet = false;
  {{/vendorExtensions.x-is-base-datamodel}}
  {{/vars}}

  {{#vars}}
  {{^vendorExtensions.x-is-base-datamodel}}

  if (val.count("{{baseName}}")) {
  {{#isPrimitiveType}}
  {{^isListContainer}}
    {{setter}}({{#isEnum}}string_to_{{{datatype}}}(val.at("{{baseName}}").get<std::string>()){{/isEnum}}{{^isEnum}}val.at("{{baseName}}").get<{{{datatype}}}>(){{/isEnum}});
  {{/isListContainer}}
  {{/isPrimitiveType}}
  {{#isListContainer}}
    for (auto& item : val["{{baseName}}"]) {
      {{#isPrimitiveType}}
      m_{{name}}.push_back(item);
      {{/isPrimitiveType}}
      {{^isPrimitiveType}}
      {{#items.isString}}
      m_{{name}}.push_back(item);
      {{/items.isString}}
      {{^items.isString}}
      {{#items.isDateTime}}
      m_{{name}}.push_back(item);
      {{/items.isDateTime}}
      {{^items.isDateTime}}
      {{{items.datatype}}}JsonObject newItem{ item };
      m_{{name}}.push_back(newItem);
      {{/items.isDateTime}}
      {{/items.isString}}
    }

    m_{{name}}IsSet = true;
    {{/isPrimitiveType}}
    {{/isListContainer}}
    {{^isListContainer}}
    {{^isPrimitiveType}}
    {{#isString}}
      {{setter}}(val.at("{{baseName}}"));
    {{/isString}}
    {{^isString}}
    {{#isDateTime}}
      {{setter}}(val.at("{{baseName}}"));
    {{/isDateTime}}
    {{^isDateTime}}
    if (!val["{{baseName}}"].is_null()) {
      {{{datatype}}}JsonObject newItem { val["{{baseName}}"] };
      {{setter}}(newItem);
    }
    {{/isDateTime}}
    {{/isString}}
    {{/isPrimitiveType}}
    {{/isListContainer}}
  }
{{/vendorExtensions.x-is-base-datamodel}}
{{/vars}}
}

nlohmann::json {{classname}}JsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

{{#vars}}
{{^vendorExtensions.x-is-base-datamodel}}
{{#isPrimitiveType}}
{{^isListContainer}}
  if (m_{{name}}IsSet) {
    val["{{baseName}}"] = {{#isEnum}}{{{datatype}}}_to_string(m_{{name}}){{/isEnum}}{{^isEnum}}m_{{name}}{{/isEnum}};
  }
{{/isListContainer}}
{{/isPrimitiveType}}
{{#isListContainer}}  {
    nlohmann::json jsonArray;
    for (auto& item : m_{{name}}) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["{{baseName}}"] = jsonArray;
    }
  }
{{/isListContainer}}{{^isListContainer}}{{^isPrimitiveType}}  if (m_{{name}}IsSet) {
    val["{{baseName}}"] = JsonObjectBase::toJson(m_{{name}});
  }
{{/isPrimitiveType}}{{/isListContainer}}
{{/vendorExtensions.x-is-base-datamodel}}
{{/vars}}
  return val;
}

{{#vars}}
{{^vendorExtensions.x-is-base-datamodel}}
{{^isNotContainer}}const std::vector<{{complexType}}JsonObject>& {{classname}}JsonObject::{{getter}}() const{
  return m_{{name}};
}

void {{classname}}JsonObject::add{{complexType}}({{complexType}}JsonObject value) {
  m_{{name}}.push_back(value);
  m_{{name}}IsSet = true;
}

{{/isNotContainer}}{{#isNotContainer}}{{{datatype}}}{{^isPrimitiveType}}JsonObject{{/isPrimitiveType}} {{classname}}JsonObject::{{getter}}() const {
  return m_{{name}};
}

void {{classname}}JsonObject::{{setter}}({{{datatype}}}{{^isPrimitiveType}}JsonObject{{/isPrimitiveType}} value) {
  m_{{name}} = value;
  m_{{name}}IsSet = true;
}
{{/isNotContainer}}

bool {{classname}}JsonObject::{{name}}IsSet() const {
  return m_{{name}}IsSet;
}

{{^vendorExtensions.x-is-required}}
void {{classname}}JsonObject::unset{{nameInCamelCase}}() {
  m_{{name}}IsSet = false;
}{{/vendorExtensions.x-is-required}}

{{#isEnum}}
std::string {{classname}}JsonObject::{{{datatype}}}_to_string(const {{{datatype}}} &value){
  switch(value) {
    {{#allowableValues.values}}
    case {{{datatype}}}::{{value}}:
      return std::string("{{stringValue}}");
    {{/allowableValues.values}}
    default:
      throw std::runtime_error("Bad {{classname}} {{name}}");
  }
}

{{{datatype}}} {{classname}}JsonObject::string_to_{{{datatype}}}(const std::string &str){
  {{#allowableValues.values}}
  if (JsonObjectBase::iequals("{{stringValue}}", str))
    return {{{datatype}}}::{{value}};
  {{/allowableValues.values}}
  throw std::runtime_error("{{classname}} {{name}} is invalid");
}
{{/isEnum}}
{{/vendorExtensions.x-is-base-datamodel}}
{{/vars}}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
