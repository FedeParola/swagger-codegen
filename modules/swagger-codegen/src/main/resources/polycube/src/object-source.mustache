{{>licenseInfo}}

//Modify these methods with your own implementation

{{#models}}{{#model}}
#include "{{classname}}.h"
{{#vendorExtensions.x-root-object}}
#include "{{vendorExtensions.x-root-object}}.h"
{{/vendorExtensions.x-root-object}}
{{#vendorExtensions.x-is-root-object}}
#include "{{classname}}_dp.h"

{{classname}}::{{classname}}({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}JsonObject &conf)
  : Cube(conf.getBase(), { {{classVarName}}_code }, {}) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [{{classname}}] [%n] [%l] %v");
  logger()->info("Creating {{classname}} instance");

{{#vars}}{{^vendorExtensions.x-is-base-datamodel}}{{^isNotContainer}}  add{{nameInCamelCase}}List(conf.{{getter}}());{{/isNotContainer}}{{#isNotContainer}}{{^vendorExtensions.x-is-key}}{{^isReadOnly}}{{^vendorExtensions.x-is-required}}{{^vendorExtensions.x-has-default-value}}
  if (conf.{{name}}IsSet()) {
{{/vendorExtensions.x-has-default-value}}{{/vendorExtensions.x-is-required}}{{#isPrimitiveType}}
    {{setter}}(conf.{{getter}}());{{/isPrimitiveType}}{{^isPrimitiveType}}
    auto value = conf.{{getter}}();{{#vendorExtensions.x-key-list}}
    {{type}} {{varName}}_ = value.{{getter}}();{{/vendorExtensions.x-key-list}}
    add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}, {{/vendorExtensions.x-key-list}}conf.{{getter}}());{{/isPrimitiveType}}{{^vendorExtensions.x-is-required}}{{^vendorExtensions.x-has-default-value}}
  }{{/vendorExtensions.x-has-default-value}}{{/vendorExtensions.x-is-required}}{{/isReadOnly}}{{/vendorExtensions.x-is-key}}
{{/isNotContainer}}{{/vendorExtensions.x-is-base-datamodel}}{{/vars}}
}
{{/vendorExtensions.x-is-root-object}}

{{#vendorExtensions.x-is-port-class}}
{{classname}}::{{classname}}(polycube::service::Cube<Ports> &parent,
    {{#vendorExtensions.x-classname-inherited}}{{{this}}} port,
    {{/vendorExtensions.x-classname-inherited}}const {{classname}}JsonObject &conf)
    : Port(port), parent_(static_cast<{{vendorExtensions.x-parent}} &>(parent)) {
  logger()->info("Creating {{classname}} instance");
}{{/vendorExtensions.x-is-port-class}}

{{^vendorExtensions.x-is-root-object}}{{^vendorExtensions.x-is-port-class}}
{{classname}}::{{classname}}({{{vendorExtensions.x-parent}}} &parent, const {{classname}}JsonObject &conf): parent_(parent) {
  logger()->info("Creating {{classname}} instance");
}{{/vendorExtensions.x-is-port-class}}{{/vendorExtensions.x-is-root-object}}

{{classname}}::~{{classname}}() { }

void {{classname}}::update(const {{classname}}JsonObject &conf) {
  // This method updates all the object/parameter in {{classname}} object specified in the conf JsonObject.
  // You can modify this implementation.
{{#vendorExtensions.x-is-root-object}}
  Cube::set_conf(conf.getBase());
{{/vendorExtensions.x-is-root-object}}
{{#vendorExtensions.x-is-port-class}}
  Port::set_conf(conf.getBase());
{{/vendorExtensions.x-is-port-class}}

{{#vars}}{{^vendorExtensions.x-is-base-datamodel}}{{^vendorExtensions.x-is-key}}{{^isReadOnly}}  if (conf.{{name}}IsSet()) {
{{^isNotContainer}}    for(auto &i : conf.{{getter}}()){
{{#vendorExtensions.x-key-list}}      auto {{varName}} = i.{{getter}}();{{/vendorExtensions.x-key-list}}
      auto m = get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
      m->update(i);
    }{{/isNotContainer}}{{#isNotContainer}}{{#isPrimitiveType}}
    {{setter}}(conf.{{getter}}());{{/isPrimitiveType}}{{^isPrimitiveType}}
    auto m = {{getter}}();
    m->update(conf.{{getter}}());{{/isPrimitiveType}}{{/isNotContainer}}
  }{{/isReadOnly}}{{/vendorExtensions.x-is-key}}{{/vendorExtensions.x-is-base-datamodel}}{{/vars}}
}

{{classname}}JsonObject {{classname}}::toJsonObject() {
  {{classname}}JsonObject conf;
{{#vendorExtensions.x-is-root-object}}
  conf.setBase(Cube::to_json());
{{/vendorExtensions.x-is-root-object}}
{{#vendorExtensions.x-is-port-class}}
  conf.setBase(Port::to_json());
{{/vendorExtensions.x-is-port-class}}

{{#vars}}{{^vendorExtensions.x-is-base-datamodel}}{{#isNotContainer}}{{#isPrimitiveType}}
  conf.{{setter}}({{getter}}());{{/isPrimitiveType}}{{^isPrimitiveType}}
  conf.{{setter}}({{getter}}()->toJsonObject());{{/isPrimitiveType}}
{{/isNotContainer}}{{^isNotContainer}}
{{#vendorExtensions.x-is-port-class}}
  for(auto &i : {{getter}}List()){
    conf.add{{complexType}}(i->toJsonObject());
  }{{/vendorExtensions.x-is-port-class}}{{^vendorExtensions.x-is-port-class}}
  //  Remove comments when you implement all sub-methods
  //for(auto &i : {{getter}}List()){
  //  conf.add{{complexType}}(i->toJsonObject());
  //}{{/vendorExtensions.x-is-port-class}}
{{/isNotContainer}}{{/vendorExtensions.x-is-base-datamodel}}{{/vars}}

  return conf;
}

{{^vendorExtensions.x-parent}}
void {{classname}}::packet_in({{vendorExtensions.x-child-ports-classname}} &port,
    polycube::service::PacketInMetadata &md,
    const std::vector<uint8_t> &packet){
  logger()->info("Packet received from port {0}", port.name());
}
{{/vendorExtensions.x-parent}}
{{#vars}}
{{^vendorExtensions.x-is-base-datamodel}}
{{^vendorExtensions.x-has-default-impl}}
{{#isNotContainer}}
{{#isPrimitiveType}}

{{{datatype}}} {{classname}}::{{getter}}() {
  throw std::runtime_error("[{{classname}}]: Method {{getter}} not implemented");
}
{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}

void {{classname}}::{{setter}}(const {{{datatype}}} &value) {
  throw std::runtime_error("[{{classname}}]: Method {{setter}} not implemented");
}
{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{/isNotContainer}}
{{/vendorExtensions.x-has-default-impl}}
{{/vendorExtensions.x-is-base-datamodel}}

{{^isNotContainer}}
std::shared_ptr<{{complexType}}> {{classname}}::get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) {
{{#vendorExtensions.x-is-port-class}}
  return get_port(name);
{{/vendorExtensions.x-is-port-class}}
{{^vendorExtensions.x-is-port-class}}
  throw std::runtime_error("[{{classname}}]: Method getEntry not implemented");
{{/vendorExtensions.x-is-port-class}}
}

std::vector<std::shared_ptr<{{complexType}}>> {{classname}}::get{{nameInCamelCase}}List() {
{{#vendorExtensions.x-is-port-class}}
  return get_ports();
{{/vendorExtensions.x-is-port-class}}
{{^vendorExtensions.x-is-port-class}}
  throw std::runtime_error("[{{classname}}]: Method get{{nameInCamelCase}}List not implemented");
{{/vendorExtensions.x-is-port-class}}
}

void {{classname}}::add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) {
{{#vendorExtensions.x-is-port-class}}
  // This method creates the actual Ports object given the key param.
  add_port<PortsJsonObject>(name, conf);
  logger()->info("New port created with name {0}", name);
{{/vendorExtensions.x-is-port-class}}
{{^vendorExtensions.x-is-port-class}}
  throw std::runtime_error("[{{classname}}]: Method add{{nameInCamelCase}} not implemented");
{{/vendorExtensions.x-is-port-class}}
}

void {{classname}}::add{{nameInCamelCase}}List(const std::vector<{{complexType}}JsonObject> &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  for (auto &i : conf) {
    {{#vendorExtensions.x-key-list}}
    {{type}} {{varName}}_ = i.{{getter}}();
    {{/vendorExtensions.x-key-list}}
    add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}_, {{/vendorExtensions.x-key-list}}i);
  }
}

void {{classname}}::replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
  {{#vendorExtensions.x-key-list}}
  {{type}} {{varName}}_ = conf.{{getter}}();
  {{/vendorExtensions.x-key-list}}
  add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}_, {{/vendorExtensions.x-key-list}}conf);
}

void {{classname}}::del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) {
{{#vendorExtensions.x-is-port-class}}
  remove_port(name);
{{/vendorExtensions.x-is-port-class}}
{{^vendorExtensions.x-is-port-class}}
  throw std::runtime_error("[{{classname}}]: Method del{{nameInCamelCase}} not implemented");
{{/vendorExtensions.x-is-port-class}}
}

void {{classname}}::del{{nameInCamelCase}}List() {
  // TODO: This is a basic default implementation, maybe you want to improve it
  auto elements = get{{nameInCamelCase}}List();
  for (auto &i : elements) {
    {{#vendorExtensions.x-key-list}}
    {{type}} {{varName}}_ = i->{{getter}}();
    {{/vendorExtensions.x-key-list}}
    del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}_);
  }
}

{{/isNotContainer}}
{{#isNotContainer}}
{{^isPrimitiveType}}
std::shared_ptr<{{complexType}}> {{classname}}::get{{nameInCamelCase}}() {
  throw std::runtime_error("[{{classname}}]: Method get{{nameInCamelCase}} not implemented");
}

{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}
void {{classname}}::add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &value) {
  throw std::runtime_error("[{{classname}}]: Method add{{nameInCamelCase}} not implemented");
}

void {{classname}}::replace{{nameInCamelCase}}(const {{complexType}}JsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  del{{nameInCamelCase}}();
  {{#vendorExtensions.x-key-list}}
  {{type}} {{varName}}_ = conf.{{getter}}();
  {{/vendorExtensions.x-key-list}}
  add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}_, {{/vendorExtensions.x-key-list}}conf);
}

void {{classname}}::del{{nameInCamelCase}}() {
  throw std::runtime_error("[{{classname}}]: Method del{{nameInCamelCase}} not implemented");
}
{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{/isNotContainer}}
{{/vars}}

{{#vendorExtensions.x-has-yang-actions}}
{{#vendorExtensions.x-yang-actions}}
{{#x-yang-action-has-output}}{{x-yang-action-output-object}}JsonObject{{/x-yang-action-has-output}}{{^x-yang-action-has-output}}void{{/x-yang-action-has-output}} {{classname}}::{{x-yang-action-name-lower-camelcase}}({{#x-yang-action-has-input}}{{x-yang-action-input-object}}JsonObject input{{/x-yang-action-has-input}}) {
  throw std::runtime_error("[{{classname}}]: Method {{x-yang-action-name-lower-camelcase}} not implemented");
}
{{/vendorExtensions.x-yang-actions}}
{{/vendorExtensions.x-has-yang-actions}}

{{#vendorExtensions.x-parent}}
std::shared_ptr<spdlog::logger> {{classname}}::logger() {
  return parent_.logger();
}
{{/vendorExtensions.x-parent}}
{{/model}}{{/models}}
