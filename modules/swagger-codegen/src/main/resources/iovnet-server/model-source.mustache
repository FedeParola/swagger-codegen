{{>licenseInfo}}

/* Do not edit this file manually */

{{#models}}{{#model}}

#include "{{classname}}Schema.h"

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{classname}}Schema::{{classname}}Schema() {
  {{#vars}}{{#isNotContainer}}{{#isPrimitiveType}}m_{{nameInCamelCase}} = {{{defaultValue}}};
  {{/isPrimitiveType}}{{^isPrimitiveType}}{{#isString}}m_{{nameInCamelCase}} = {{{defaultValue}}};
  {{/isString}}{{#isDateTime}}m_{{nameInCamelCase}} = {{{defaultValue}}};
  {{/isDateTime}}{{/isPrimitiveType}}{{/isNotContainer}}{{^required}}m_{{nameInCamelCase}}IsSet = false;
  {{/required}}{{/vars}}
}

{{classname}}Schema::~{{classname}}Schema() {}

void {{classname}}Schema::validate() {
  // TODO: implement validation
}

nlohmann::json {{classname}}Schema::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}{{#isPrimitiveType}}{{^isListContainer}}{{^required}}if(m_{{nameInCamelCase}}IsSet) {
      val["{{baseName}}"] = m_{{nameInCamelCase}};
  }

  {{/required}}{{#required}}val["{{baseName}}"] = m_{{nameInCamelCase}};
  {{/required}}{{/isListContainer}}{{/isPrimitiveType}}{{#isListContainer}}
  {
    nlohmann::json jsonArray;
    for (auto& item : m_{{nameInCamelCase}}) {
      jsonArray.push_back(ModelBase::toJson(item));
    }
    {{#required}}val["{{baseName}}"] = jsonArray;
    {{/required}}{{^required}}
    if (jsonArray.size() > 0) {
      val["{{baseName}}"] = jsonArray;
    }
    {{/required}}
  }
  {{/isListContainer}}{{^isListContainer}}{{^isPrimitiveType}}{{^required}}if(m_{{nameInCamelCase}}IsSet) {
      val["{{baseName}}"] = ModelBase::toJson(m_{{nameInCamelCase}});
  }
  {{/required}}{{#required}}val["{{baseName}}"] = ModelBase::toJson(m_{{nameInCamelCase}});
  {{/required}}{{/isPrimitiveType}}{{/isListContainer}}{{/vars}}

  return val;
}

void {{classname}}Schema::fromJson(nlohmann::json& val) {
  {{#vars}}
  {{#isPrimitiveType}}{{^isListContainer}}
  {{^required}}
  if (val.find("{{baseName}}") != val.end()) {
      {{setter}}(val.at("{{baseName}}"));
  }
  {{/required}}
  {{#required}}
  {{setter}}(val.at("{{baseName}}"));
  {{/required}}{{/isListContainer}}
  {{/isPrimitiveType}}
  {{#isListContainer}}
  m_{{nameInCamelCase}}.clear();
  for (auto& item : val["{{baseName}}"]) {
      {{#isPrimitiveType}}m_{{nameInCamelCase}}.push_back(item);
      {{/isPrimitiveType}}{{^isPrimitiveType}}{{#items.isString}}m_{{nameInCamelCase}}.push_back(item);
      {{/items.isString}}{{^items.isString}}{{#items.isDateTime}}m_{{nameInCamelCase}}.push_back(item);
      {{/items.isDateTime}}{{^items.isDateTime}}
      {{{items.datatype}}}Schema newItem;
      newItem.fromJson(item);
      m_{{nameInCamelCase}}.push_back(newItem);
      {{/items.isDateTime}}{{/items.isString}}{{/isPrimitiveType}}
  }
  {{/isListContainer}}
  {{^isListContainer}}{{^isPrimitiveType}}{{^required}}
  if (val.find("{{baseName}}") != val.end()) {
      {{#isString}}{{setter}}(val.at("{{baseName}}"));
      {{/isString}}{{^isString}}{{#isDateTime}}{{setter}}(val.at("{{baseName}}"));
      {{/isDateTime}}{{^isDateTime}}
      if (!val["{{baseName}}"].is_null()) {
          {{{datatype}}}Schema newItem;
          newItem.fromJson(val["{{baseName}}"]);
          {{setter}}(newItem);
      }
      {{/isDateTime}}{{/isString}}
  }
  {{/required}}{{#required}}{{#isString}}{{setter}}(val.at("{{baseName}}"));
  {{/isString}}{{^isString}}{{#isDateTime}}{{setter}}(val.at("{{baseName}}"));
  {{/isDateTime}}{{/isString}}{{/required}}{{/isPrimitiveType}}{{/isListContainer}}
  {{/vars}}
}

nlohmann::json {{classname}}Schema::getKeys() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{#vendorExtensions.x-is-key}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  val["{{baseName}}"]["type"] = "key";
  {{#isString}}
  val["{{baseName}}"]["simpletype"] = "string";
  {{/isString}}
  {{#isInteger}}
  val["{{baseName}}"]["simpletype"] = "integer";
  {{/isInteger}}
  {{#isBoolean}}
  val["{{baseName}}"]["simpletype"] = "boolean";
  {{/isBoolean}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  {{/vendorExtensions.x-is-key}}
  {{/vars}}

  return val;
}

nlohmann::json {{classname}}Schema::getElements() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{^vendorExtensions.x-is-key}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  val["{{baseName}}"]["type"] = "leaf"; // Suppose that type is leaf
  {{#isListContainer}}
  val["{{baseName}}"]["type"] = "list";
  {{/isListContainer}}
  {{#isString}}
  val["{{baseName}}"]["simpletype"] = "string";
  {{/isString}}
  {{#isInteger}}
  val["{{baseName}}"]["simpletype"] = "integer";
  {{/isInteger}}
  {{#isBoolean}}
  val["{{baseName}}"]["simpletype"] = "boolean";
  {{/isBoolean}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  val["{{baseName}}"]["jsonSchema"] = nlohmann::json::parse(R"IOVNET({{{jsonSchema}}})IOVNET");
  {{/vendorExtensions.x-is-key}}
  {{/vars}}

  return val;
}

nlohmann::json {{classname}}Schema::getWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  {{#isPrimitiveType}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  {{#isString}}
  val["{{baseName}}"]["simpletype"] = "string";
  {{/isString}}
  {{#isInteger}}
  val["{{baseName}}"]["simpletype"] = "integer";
  {{/isInteger}}
  {{#isBoolean}}
  val["{{baseName}}"]["simpletype"] = "boolean";
  {{/isBoolean}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  val["{{baseName}}"]["jsonSchema"] = nlohmann::json::parse(R"IOVNET({{{jsonSchema}}})IOVNET");
  {{/isPrimitiveType}}
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/vars}}

  return val;
}

nlohmann::json {{classname}}Schema::getComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{^isPrimitiveType}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  {{#isListContainer}}
  val["{{baseName}}"]["type"] = "list";
  {{/isListContainer}}
  {{^isListContainer}}
  val["{{baseName}}"]["type"] = "complex";
  {{/isListContainer}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  {{/isPrimitiveType}}
  {{/vars}}

  return val;
}

{{#vars}}{{^isNotContainer}}std::vector<{{complexType}}Schema>& {{classname}}Schema::{{getter}}() {
  return m_{{nameInCamelCase}};
}

{{/isNotContainer}}{{#isNotContainer}}{{{datatype}}}{{^isPrimitiveType}}Schema{{/isPrimitiveType}} {{classname}}Schema::{{getter}}() const {
  return m_{{nameInCamelCase}};
}

void {{classname}}Schema::{{setter}}({{{datatype}}}{{^isPrimitiveType}}Schema{{/isPrimitiveType}} value) {
  m_{{nameInCamelCase}} = value;
  {{^required}}m_{{nameInCamelCase}}IsSet = true;{{/required}}
}
{{/isNotContainer}}

{{^required}}bool {{classname}}Schema::{{name}}IsSet() const {
  return m_{{nameInCamelCase}}IsSet;
}

void {{classname}}Schema::unset{{name}}() {
  m_{{nameInCamelCase}}IsSet = false;
}
{{/required}}
{{/vars}}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
