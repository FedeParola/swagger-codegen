{{>licenseInfo}}

//These methods have a default implentation. Your are free to keep it or add your own

{{#models}}{{#model}}
#include "{{classname}}.h"
{{^vendorExtensions.x-parent}}
#include "../{{classname}}_dp.h"
{{/vendorExtensions.x-parent}}

{{#vars}}
{{^isNotContainer}}
std::shared_ptr<{{complexType}}> {{classname}}::get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}){
  return {{complexType}}::getEntry(*this, {{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
}

std::vector<std::shared_ptr<{{complexType}}>> {{classname}}::get{{nameInCamelCase}}List(){
  return {{complexType}}::get(*this);
}

void {{classname}}::add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf){
  {{complexType}}::create(*this, {{#vendorExtensions.x-key-list}}{{varName}}, {{/vendorExtensions.x-key-list}}conf);
}

void {{classname}}::add{{nameInCamelCase}}List(const std::vector<{{complexType}}JsonObject> &conf){
  for(auto &i : conf){
    {{#vendorExtensions.x-key-list}}
    {{type}} {{varName}}_ = i.{{getter}}();
    {{/vendorExtensions.x-key-list}}
    {{complexType}}::create(*this, {{#vendorExtensions.x-key-list}}{{varName}}_, {{/vendorExtensions.x-key-list}} i);
  }
}

void {{classname}}::replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf){
  {{complexType}}::removeEntry(*this, {{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
  {{#vendorExtensions.x-key-list}}
  {{type}} {{varName}}_ = conf.{{getter}}();
  {{/vendorExtensions.x-key-list}}
  {{complexType}}::create(*this, {{#vendorExtensions.x-key-list}}{{varName}}_, {{/vendorExtensions.x-key-list}}conf);
  
}

void {{classname}}::del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}){
  {{complexType}}::removeEntry(*this, {{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
}

void {{classname}}::del{{nameInCamelCase}}List(){
  {{complexType}}::remove(*this);
}

{{/isNotContainer}}
{{#isNotContainer}}
{{^isPrimitiveType}}
std::shared_ptr<{{complexType}}> {{classname}}::get{{nameInCamelCase}}(){
  return {{complexType}}::getEntry(*this);
}

{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}
void {{classname}}::add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &value){
  {{complexType}}::create(*this, {{#vendorExtensions.x-key-list}}{{varName}}, {{/vendorExtensions.x-key-list}}value); 
}

void {{classname}}::replace{{nameInCamelCase}}(const {{complexType}}JsonObject &conf){
  {{complexType}}::removeEntry(*this);
  {{#vendorExtensions.x-key-list}}
  {{type}} {{varName}}_ = conf.{{getter}}();
  {{/vendorExtensions.x-key-list}}
  {{complexType}}::create(*this, {{#vendorExtensions.x-key-list}}{{varName}}_, {{/vendorExtensions.x-key-list}}conf);  
}

void {{classname}}::del{{nameInCamelCase}}(){
  {{complexType}}::removeEntry(*this);
}

{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{/isNotContainer}}
{{/vars}}

{{/model}}{{/models}}
