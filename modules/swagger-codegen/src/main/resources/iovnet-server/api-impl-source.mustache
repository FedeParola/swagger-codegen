{{>licenseInfo}}

/* Do not edit this file manually */

{{#operations}}

#include "{{classname}}Impl.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

{{classname}}Impl::{{classname}}Impl() {}

/*
* These functions include a default basic implementation.  The user could
* extend adapt this implementation to his needs.
*/

{{baseName}} &{{classname}}Impl::get_iomodule(const std::string &name) {
  try {
    return iomodules.at(name);
  } catch (std::exception e) {
    throw std::runtime_error("IOModule " + name + " does not exist");
  }
}

void {{classname}}Impl::create_{{classVarName}}_by_id(const std::string &name, const {{baseName}}JsonObject &jsonObject) {
  if (iomodules.count(name) != 0) {
    throw std::runtime_error("There is already an IOModule with name " + name);
  }

  {{baseName}}JsonObject localJsonObject(jsonObject);

  if(localJsonObject.typeIsSet()) {
    switch(localJsonObject.getType()) {
      case IOModuleType::TYPE_XDP_SKB:
        iomodules.emplace(std::piecewise_construct,
                                   std::forward_as_tuple(name),
                                   std::forward_as_tuple(name, jsonObject, IOModuleType::TYPE_XDP_SKB));
        break;
      case IOModuleType::TYPE_XDP_DRV:
				iomodules.emplace(std::piecewise_construct,
		                               std::forward_as_tuple(name),
		                               std::forward_as_tuple(name, jsonObject, IOModuleType::TYPE_XDP_DRV));
        break;
      default:
        iomodules.emplace(std::piecewise_construct,
                                   std::forward_as_tuple(name),
                                   std::forward_as_tuple(name, jsonObject));
    }
  } else {
    iomodules.emplace(std::piecewise_construct,
                                   std::forward_as_tuple(name),
                                   std::forward_as_tuple(name, jsonObject));
  }
}

void {{classname}}Impl::delete_{{classVarName}}_by_id(const std::string &name) {
  if (iomodules.count(name) == 0) {
    throw std::runtime_error("IOModule " + name + " does not exist");
  }
  iomodules.erase(name);
}

std::string {{classname}}Impl::read_{{classVarName}}_uuid_by_id(const std::string &name) {
  auto &&m = get_iomodule(name);
  return m.getUuid();
}

std::vector<{{baseName}}JsonObject> {{classname}}Impl::read_{{classVarName}}_list_by_id() {
  std::vector<{{baseName}}JsonObject> jsonObject_vect; 
  for(auto &i : iomodules) {
    jsonObject_vect.push_back(get_iomodule(i.first).toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<std::string> {{classname}}Impl::read_{{classVarName}}_list_by_id_get_list() {
  std::vector<std::string> modules;
  for (auto &x : iomodules) {
    modules.push_back(x.first);
  }
  return modules;
}

/*
* Ports list related functions
*/
void {{classname}}Impl::create_{{classVarName}}_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &ports) {
   auto &&m = get_iomodule(name);
   for (auto &port : ports) {
        m.addPorts(port); 
   }
}

std::vector<PortsJsonObject> {{classname}}Impl::read_{{classVarName}}_ports_list_by_id(const std::string &name) {
  throw std::runtime_error("Method not supported");
}

void {{classname}}Impl::replace_{{classVarName}}_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &ports) {
  throw std::runtime_error("Method not supported");
}

void {{classname}}Impl::delete_{{classVarName}}_ports_list_by_id(const std::string &name) {
  throw std::runtime_error("Method not supported");
}

/*
* Ports related functions
*/
void {{classname}}Impl::create_{{classVarName}}_ports_by_id(const std::string &name, const PortsJsonObject &ports) {
  auto &&m = get_iomodule(name);
    return m.addPorts(ports);
}

PortsJsonObject {{classname}}Impl::read_{{classVarName}}_ports_by_id(const std::string &name, const std::string &portsName) {
  auto &&m = get_iomodule(name);
  return m.getPorts(portsName)->toJsonObject();
}

void {{classname}}Impl::replace_{{classVarName}}_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &ports) {
  auto &&m = get_iomodule(name);
  auto &&p = m.getPorts(portsName);
  p->update(ports);
}

void {{classname}}Impl::delete_{{classVarName}}_ports_by_id(const std::string &name, const std::string &portsName) {
  auto &&m = get_iomodule(name);
  m.delPorts(portsName);
}

std::string {{classname}}Impl::read_{{classVarName}}_ports_peer_by_id(const std::string &name, const std::string &portsName) {
  auto &&m = get_iomodule(name);
  auto &&p = m.getPorts(portsName);
  return p->getPeer();
}

PortsStatus {{classname}}Impl::read_{{classVarName}}_ports_status_by_id(const std::string &name, const std::string &portsName) {
  auto &&m = get_iomodule(name);
  auto &&p = m.getPorts(portsName);
  return p->getStatus();
}

std::string {{classname}}Impl::read_{{classVarName}}_ports_uuid_by_id(const std::string &name, const std::string &portsName) {
  auto &&m = get_iomodule(name);
  auto &&p = m.getPorts(portsName);
  return p->getUuid();
}

void {{classname}}Impl::replace_{{classVarName}}_ports_peer_by_id(const std::string &name, const std::string &portsName, const std::string &peer) {
  auto &&m = get_iomodule(name);
  auto &&p = m.getPorts(portsName);
  p->setPeer(peer);
}

void {{classname}}Impl::replace_{{classVarName}}_ports_status_by_id(const std::string &name, const std::string &portsName, const PortsStatus &status) {
  auto &&m = get_iomodule(name);
  auto &&p = m.getPorts(portsName);
  p->setStatus(status);
}


{{#operation}}
{{^vendorExtensions.x-has-default-impl}}
/**
* @brief   {{summary}}
*
* {{notes}}*
*{{#allParams}}
* @param[in] {{paramName}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{/allParams}}
*
* Responses:
* {{#returnType}}{{{returnType}}}{{/returnType}}
*/
{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
{{classname}}Impl::{{operationIdSnakeCase}}({{#allParams}}const {{{dataType}}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
  {{^vendorExtensions.x-is-list-update}}
	{{#vendorExtensions.x-call-sequence-method}}
	{{^lastCall}}
	auto &&{{{varName}}} = {{{methodCall}}};
	{{/lastCall}}
	{{#lastCall}}
	{{^vendorExtensions.x-is-list}}
	{{#returnType}}return {{{methodCall}}}{{^returnTypeIsPrimitive}}toJsonObject(){{/returnTypeIsPrimitive}};{{/returnType}}
	{{^returnType}}{{{methodCall}}};{{/returnType}}
	{{/vendorExtensions.x-is-list}}
	{{#vendorExtensions.x-is-list}}
	{{^returnType}}
	{{^noIteration}}for(auto &i : value)
		{{{methodCall}}};
	{{/noIteration}}
	{{#noIteration}}{{{methodCall}}};{{/noIteration}}
	{{/returnType}}
	{{#returnType}}
	auto &&{{{varName}}} = {{{methodCall}}};
	{{{returnType}}} m;
	for(auto &i : {{{varName}}})
		m.push_back(i->toJsonObject());
	return m;
	{{/returnType}}
	{{/vendorExtensions.x-is-list}}
	{{/lastCall}}
	{{/vendorExtensions.x-call-sequence-method}}
	{{/vendorExtensions.x-is-list-update}}
	{{#vendorExtensions.x-is-list-update}}
	throw std::runtime_error("Method not supported");
	{{/vendorExtensions.x-is-list-update}}
}

{{/vendorExtensions.x-has-default-impl}}
{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
