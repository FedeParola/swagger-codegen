{{>licenseInfo}}

/* Do not edit this file manually */

{{#models}}{{#model}}/*
* {{classname}}Schema.h
*
* {{description}}
*/

#pragma once

{{{defaultInclude}}}
#include "ModelBase.h"

{{#imports}}
{{{this}}}
{{/imports}}

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

/// <summary>
/// {{description}}
/// </summary>
class {{declspec}} {{classname}}Schema : public ModelBase {
public:
  {{classname}}Schema();
  virtual ~{{classname}}Schema();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  nlohmann::json toJson() const override;
  void fromJson(nlohmann::json& json) override;

  static nlohmann::json getKeys();
  static nlohmann::json getElements();
  static nlohmann::json getWritableLeafs();
  static nlohmann::json getComplexElements();
  /////////////////////////////////////////////
  /// {{classname}}Schema members

  {{#vars}}
  /// <summary>
  /// {{description}}
  /// </summary>
  {{^isNotContainer}}
  std::vector<{{complexType}}Schema>& {{getter}}();
  {{/isNotContainer}}
  {{#isNotContainer}}
  {{#isPrimitiveType}}
  {{{datatype}}} {{getter}}() const;
  void {{setter}}({{{datatype}}} value);
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  {{{datatype}}}Schema {{getter}}() const;
  void {{setter}}({{{datatype}}}Schema value);
  {{/isPrimitiveType}}
  {{/isNotContainer}}
  {{^required}}
  bool {{name}}IsSet() const;
  void unset{{name}}();
  {{/required}}

  {{/vars}}
protected:
  {{#vars}}
  {{#isNotContainer}}
  {{{datatype}}} m_{{nameInCamelCase}};
  {{/isNotContainer}}
  {{^isNotContainer}}
  std::vector<{{complexType}}Schema> m_{{nameInCamelCase}};
  {{/isNotContainer}}
  {{^required}}
  bool m_{{nameInCamelCase}}IsSet;{{/required}}
  {{/vars}}
};

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
