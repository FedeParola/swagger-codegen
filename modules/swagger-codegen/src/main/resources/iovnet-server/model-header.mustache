{{>licenseInfo}}

/* Do not edit this file manually */

{{#models}}{{#model}}/*
* {{classname}}Schema.h
*
* {{description}}
*/

#pragma once

{{{defaultInclude}}}
#include "ModelBase.h"

{{#imports}}
{{{this}}}
{{/imports}}
{{^vendorExtensions.x-parent}}
#include "iovnet/services/iomodule.h"

using iovnet::service::IOModuleType;
{{/vendorExtensions.x-parent}}

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{#vars}}
{{#isEnum}}
{{^vendorExtensions.x-is-iomodule-type}}
enum class {{{datatype}}}{
  {{#_enum}}{{this}} {{/_enum}} 
};
{{/vendorExtensions.x-is-iomodule-type}}
{{/isEnum}}
{{/vars}}

/// <summary>
/// {{description}}
/// </summary>
class {{declspec}} {{classname}}Schema : public ModelBase {
public:
  {{classname}}Schema();
  virtual ~{{classname}}Schema();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  nlohmann::json toJson() const override;
  void fromJson(nlohmann::json& json) override;

  static nlohmann::json getKeys();
  static nlohmann::json getElements();
  static nlohmann::json getWritableLeafs();
  static nlohmann::json getComplexElements();
  /////////////////////////////////////////////
  /// {{classname}}Schema members

  {{#vars}}
  /// <summary>
  /// {{description}}
  /// </summary>
  {{^isNotContainer}}
  const std::vector<{{complexType}}Schema>& {{getter}}() const;
  {{/isNotContainer}}
  {{#isNotContainer}}
  {{#isPrimitiveType}}
  {{{datatype}}} {{getter}}() const;
  void {{setter}}({{{datatype}}} value);
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  {{{datatype}}}Schema {{getter}}() const;
  void {{setter}}({{{datatype}}}Schema value);
  {{/isPrimitiveType}}
  {{/isNotContainer}}
  {{^required}}
  bool {{name}}IsSet() const;
  void unset{{nameInCamelCase}}();
  {{/required}}
	{{#isEnum}}
  
  static std::string enum{{nameInCamelCase}}_to_string(const {{{datatype}}} &value);
  static {{{datatype}}} string_to_enum{{nameInCamelCase}}(const std::string &str);
  {{/isEnum}}
  {{/vars}}
protected:
  {{#vars}}
  {{#isNotContainer}}
  {{#isPrimitiveType}}
  {{{datatype}}} m_{{name}};
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  {{{datatype}}}Schema m_{{name}};
  {{/isPrimitiveType}}
  {{/isNotContainer}}
  {{^isNotContainer}}
  std::vector<{{complexType}}Schema> m_{{name}};
  {{/isNotContainer}}
  {{^required}}
  bool m_{{name}}IsSet;{{/required}}
  {{/vars}}
};

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
