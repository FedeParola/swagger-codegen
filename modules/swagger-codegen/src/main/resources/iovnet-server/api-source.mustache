{{>licenseInfo}}

/* Do not edit this file manually */

{{#operations}}

#include "{{classname}}.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

{{classname}}::{{classname}}() {
  setup_routes();
};

void {{classname}}::control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) {
  try {
    auto s = router.route(request, response);
    if (s == Rest::Router::Status::NotFound) {
      response.send(Http::Code::Not_Found);
    }
  } catch (const std::exception &e) {
    response.send(iovnet::service::Http::Code::Bad_Request, e.what());
  }
}

void {{classname}}::setup_routes() {
  using namespace iovnet::service::Rest;

  {{#operation}}
  Routes::{{httpMethod}}(router, base + "{{{vendorExtensions.x-codegen-iovnet-router-path}}}", Routes::bind(&{{classname}}::{{operationIdSnakeCase}}_handler, this));
  {{/operation}}

  {{#operation}}
  {{#vendorExtensions.x-needs-help}}
  Routes::Options(router, base + "{{{vendorExtensions.x-codegen-iovnet-router-path}}}", Routes::bind(&{{classname}}::{{operationIdSnakeCase}}_help, this));
  {{/vendorExtensions.x-needs-help}}
  {{/operation}}

  {{#operation}}
  {{#vendorExtensions.x-is-yang-action}}
  Routes::Options(router, base + "{{{vendorExtensions.x-codegen-iovnet-router-path}}}", Routes::bind(&{{classname}}::{{operationIdSnakeCase}}_help, this));
  {{/vendorExtensions.x-is-yang-action}}
  {{/operation}}
}

{{#operation}}
void {{classname}}::{{operationIdSnakeCase}}_handler(
  const iovnet::service::Rest::Request &request,
  iovnet::service::HttpHandleResponse &response) {
  {{#hasPathParams}}
  // Getting the path params
  {{#pathParams}}
  auto {{paramName}} = request.param(":{{baseName}}").as<{{dataType}}>();
  {{#isEnum}}
  auto {{paramName}}_ = {{datatypeWithEnum}}::string_to_{{enumName}}({{paramName}});
  {{/isEnum}}
  {{/pathParams}}
  {{/hasPathParams}}

  {{#vendorExtensions.x-is-list}}
  {{#hasBodyParam}}
  // Getting the body param
  {{#bodyParam}}
  {{{dataType}}} {{paramName}}{{#isEnum}}_{{/isEnum}};
  {{/bodyParam}}
  {{/hasBodyParam}}
  {{/vendorExtensions.x-is-list}}

  try {
    {{^vendorExtensions.x-is-list}}
    {{#hasBodyParam}}
    // Getting the body param
    {{#bodyParam}}
    {{{dataType}}} {{paramName}}{{#isEnum}}_{{/isEnum}};
    {{/bodyParam}}
    {{/hasBodyParam}}
    {{/vendorExtensions.x-is-list}}

    {{#hasBodyParam}}
    {{#bodyParam}}
    nlohmann::json request_body = nlohmann::json::parse(request.body());
    {{^isPrimitiveType}}
    {{#isListContainer}}
    for (auto &j : request_body) {
      {{baseType}} a;
      a.fromJson(j);
      a.validateKeys();{{^vendorExtensions.isPatch}}
      a.validateMandatoryFields();{{/vendorExtensions.isPatch}}
      a.validateParams();
      {{paramName}}{{#isEnum}}_{{/isEnum}}.push_back(a);
    }
    {{/isListContainer}}
    {{^isListContainer}}
    {{paramName}}.fromJson(request_body);{{#vendorExtensions.x-key-list}}
    {{paramName}}.{{setter}}({{keyParamName}}{{#isEnum}}_{{/isEnum}});{{/vendorExtensions.x-key-list}}{{^vendorExtensions.isPatch}}
    {{paramName}}.validateMandatoryFields();{{/vendorExtensions.isPatch}}
    {{paramName}}.validateParams();
    {{/isListContainer}}
    {{/isPrimitiveType}}
    {{#isPrimitiveType}}
    {{^isEnum}}
    // The conversion is done automatically by the json library
    {{paramName}} = request_body;
    {{/isEnum}}
    {{#isEnum}}
    {{paramName}}_ = {{vendorExtensions.x-enum-class}}::string_to_{{{dataType}}}(request_body);
    {{/isEnum}}
    {{/isPrimitiveType}}
    {{/bodyParam}}
    {{/hasBodyParam}}
    {{#returnType}}

    auto x = {{operationIdSnakeCase}}({{#allParams}}{{paramName}}{{#isEnum}}_{{/isEnum}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    nlohmann::json response_body;
    {{#returnTypeIsPrimitive}}
    {{#returnSimpleType}}
    response_body = x;
    {{/returnSimpleType}}
    {{^returnSimpleType}}
    response_body = {{vendorExtensions.x-enum-class}}::{{returnType}}_to_string(x);
    {{/returnSimpleType}}
    {{/returnTypeIsPrimitive}}
    {{^returnTypeIsPrimitive}}
    {{#isListContainer}}
    for (auto &i : x) {
      response_body += i.toJson();
    }
    {{/isListContainer}}
    {{^isListContainer}}
    response_body = x.toJson();
    {{/isListContainer}}
    {{/returnTypeIsPrimitive}}
    response.send(iovnet::service::Http::Code::{{vendorExtensions.x-response-code}}, response_body.dump(4));

    {{/returnType}}
    {{^returnType}}
    {{operationIdSnakeCase}}({{#allParams}}{{paramName}}{{#isEnum}}_{{/isEnum}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    response.send(iovnet::service::Http::Code::{{vendorExtensions.x-response-code}});
    {{/returnType}}
  } catch(const std::exception &e) {
    response.send(iovnet::service::Http::Code::Internal_Server_Error, e.what());
  }
}
{{/operation}}

{{#operation}}
{{#vendorExtensions.x-needs-help}}
void {{classname}}::{{operationIdSnakeCase}}_help(
  const iovnet::service::Rest::Request &request,
  iovnet::service::HttpHandleResponse &response) {
  {{#hasPathParams}}
  // Getting the path params
  {{#pathParams}}
  auto {{paramName}} = request.param(":{{baseName}}").as<{{dataType}}>();
  {{#isEnum}}
  auto {{paramName}}_ = {{datatypeWithEnum}}::string_to_{{enumName}}({{paramName}});
  {{/isEnum}}
  {{/pathParams}}
  {{/hasPathParams}}

  {{#vendorExtensions.x-is-list}}
  {{#hasBodyParam}}
  // Getting the body param
  {{#bodyParam}}
  {{{dataType}}} {{paramName}}{{#isEnum}}_{{/isEnum}};
  {{/bodyParam}}
  {{/hasBodyParam}}
  {{/vendorExtensions.x-is-list}}

  using iovnet::service::HelpType;
  nlohmann::json val = nlohmann::json::object();
  switch (request.help_type()) {
  case HelpType::SHOW:
    {{#vendorExtensions.x-is-list}}
    val["params"] = {{returnBaseType}}JsonObject::helpKeys();
    val["elements"] = {{operationIdSnakeCase}}_get_list({{#allParams}}{{paramName}}{{#isEnum}}_{{/isEnum}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    {{/vendorExtensions.x-is-list}}
    {{^vendorExtensions.x-is-list}}
    val["params"] = {{returnBaseType}}JsonObject::helpElements();
    {{/vendorExtensions.x-is-list}}
  break;

  case HelpType::ADD:
    {{#vendorExtensions.x-is-list}}
    val["params"] = {{returnBaseType}}JsonObject::helpKeys();
    val["optional-params"] = {{returnBaseType}}JsonObject::helpWritableLeafs();
  break;
    {{/vendorExtensions.x-is-list}}
    {{^vendorExtensions.x-is-list}}
    response.send(iovnet::service::Http::Code::Bad_Request);
  return;
    {{/vendorExtensions.x-is-list}}

  case HelpType::SET:
    {{^vendorExtensions.x-is-list}}
    val["params"] = {{returnBaseType}}JsonObject::helpWritableLeafs();
  break;
    {{/vendorExtensions.x-is-list}}
    {{#vendorExtensions.x-is-list}}
    response.send(iovnet::service::Http::Code::Bad_Request);
  return;
    {{/vendorExtensions.x-is-list}}

  case HelpType::DEL:
    {{#vendorExtensions.x-is-list}}
    val["params"] = {{returnBaseType}}JsonObject::helpKeys();
    val["elements"] = {{operationIdSnakeCase}}_get_list({{#allParams}}{{paramName}}{{#isEnum}}_{{/isEnum}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
  break;
    {{/vendorExtensions.x-is-list}}
    {{^vendorExtensions.x-is-list}}
    response.send(iovnet::service::Http::Code::Bad_Request);
  return;
    {{/vendorExtensions.x-is-list}}

  case HelpType::NONE:
    {{#vendorExtensions.x-is-list}}
    val["commands"] = {"add", "del", "show"};
    val["params"] = {{returnBaseType}}JsonObject::helpKeys();
    val["elements"] = {{operationIdSnakeCase}}_get_list({{#allParams}}{{paramName}}{{#isEnum}}_{{/isEnum}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    {{/vendorExtensions.x-is-list}}
    {{^vendorExtensions.x-is-list}}
    val["commands"] = {"set", "show"};
    val["params"] = {{returnBaseType}}JsonObject::helpComplexElements();
    val["actions"] = {{returnBaseType}}JsonObject::helpActions();
    {{/vendorExtensions.x-is-list}}
  break;

  case HelpType::NO_HELP:
    response.send(iovnet::service::Http::Code::Bad_Request);
    return;
  }
  response.send(iovnet::service::Http::Code::Ok, val.dump(4));
}

{{/vendorExtensions.x-needs-help}}
{{/operation}}

{{#operation}}
{{#vendorExtensions.x-is-yang-action}}
void {{classname}}::{{operationIdSnakeCase}}_help(
  const iovnet::service::Rest::Request &request,
  iovnet::service::HttpHandleResponse &response) {
  nlohmann::json val = nlohmann::json::object();
  {{#bodyParam}}
  {{^isPrimitiveType}}
  val["in"] = {{dataType}}::helpElements();
  {{/isPrimitiveType}}
  {{/bodyParam}}

  response.send(iovnet::service::Http::Code::Ok, val.dump(4));
}
{{/vendorExtensions.x-is-yang-action}}
{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
