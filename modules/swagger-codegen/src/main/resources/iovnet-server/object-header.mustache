{{>licenseInfo}}

#pragma once

{{#models}}{{#model}}
#include "interface/{{classname}}Interface.h"

{{#vendorExtensions.x-inherits-from}}
#include "iovnet/services/iomodule.h"
#include "iovnet/services/port.h"
#include "iovnet/services/utils.h"
{{/vendorExtensions.x-inherits-from}}

{{#vendorExtensions.x-interface-imports}}
#include "{{{this}}}.h"
{{/vendorExtensions.x-interface-imports}}

{{#vendorExtensions.x-parent}}
class {{{this}}};
{{/vendorExtensions.x-parent}}

using namespace io::swagger::server::model;
{{^vendorExtensions.x-parent}}
using iovnet::service::IOModuleType;
{{/vendorExtensions.x-parent}}

{{#vars}}
{{#isEnum}}
enum class {{classname}}{{name}}{
  {{#_enum}}{{this}} {{/_enum}} 
};

{{/isEnum}}
{{/vars}}

class {{classname}} : {{#vendorExtensions.x-inherits-from}}public {{{this}}}, {{/vendorExtensions.x-inherits-from}}public {{classname}}Interface {
public:
  {{^vendorExtensions.x-parent}}
  {{classname}}({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}Schema &schema, IOModuleType type = IOModuleType::TYPE_CLS);
  {{/vendorExtensions.x-parent}}
  {{#vendorExtensions.x-parent}}
  {{classname}}({{{this}}} &parent, {{#vendorExtensions.x-classname-inherited}}{{this}} &p, {{/vendorExtensions.x-classname-inherited}}const {{classname}}Schema &schema);
  {{/vendorExtensions.x-parent}}
  virtual ~{{classname}}();
  {{^vendorExtensions.x-parent}}
  std::string generate_code();
  std::vector<std::string> generate_code_vector();
  void packet_in(iovnet::service::Port &port, iovnet::service::PacketInMetadata &md, const std::vector<uint8_t> &packet) override;
  {{/vendorExtensions.x-parent}}

  {{#vendorExtensions.x-parent}}
  static void create({{{this}}} &parent, const {{classname}}Schema &schema);
  static std::shared_ptr<{{classname}}> get({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{name}}}{{/vendorExtensions.x-is-key}}{{/vars}});
  static void remove({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{name}}}{{/vendorExtensions.x-is-key}}{{/vars}});
  {{#vendorExtensions.x-is-list}}
  static std::vector<std::shared_ptr<{{classname}}>> get({{vendorExtensions.x-parent}} &parent);
  static void remove({{vendorExtensions.x-parent}} &parent);
  {{/vendorExtensions.x-is-list}}
  {{/vendorExtensions.x-parent}}
  
  void update(const {{classname}}Schema &schema) override;
  {{classname}}Schema toSchema() override;
  {{#vars}}
  
  /// <summary>
  /// {{description}}
  /// </summary>
  {{^isNotContainer}}
  std::shared_ptr<{{complexType}}> get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) override;
  std::vector<std::shared_ptr<{{complexType}}>> getAll{{nameInCamelCase}}() override;
  void add{{nameInCamelCase}}(const {{complexType}}Schema &conf) override;
  void del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) override;
  void delAll{{nameInCamelCase}}() override;
  {{/isNotContainer}}
  {{#isNotContainer}}
  {{#isPrimitiveType}}
  {{^isEnum}}{{{datatype}}}{{/isEnum}}{{#isEnum}}{{classname}}{{name}}{{/isEnum}} {{getter}}() override;
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  void {{setter}}({{^isEnum}}{{{datatype}}}{{/isEnum}}{{#isEnum}}{{classname}}{{name}}{{/isEnum}} &value) override;
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  std::shared_ptr<{{complexType}}> get{{nameInCamelCase}}() override;
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  void add{{nameInCamelCase}}(const {{complexType}}Schema &value) override;
  void del{{nameInCamelCase}}() override;
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isPrimitiveType}}
  {{/isNotContainer}}
  {{#isEnum}}
  
  static std::string enum_to_string({{classname}}{{name}} value);
  static {{classname}}{{name}} string_to_enum(const std::string &str);
  {{/isEnum}}
  {{/vars}}
     
  {{#vendorExtensions.x-parent}}
private:    
  {{this}} &parent_;
  {{/vendorExtensions.x-parent}}  
  
};

{{/model}}
{{/models}}
