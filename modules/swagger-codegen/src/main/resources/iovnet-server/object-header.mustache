{{>licenseInfo}}

#pragma once

{{#models}}{{#model}}
#include "../interface/{{classname}}Interface.h"

{{#vendorExtensions.x-inherits-from}}
#include "iovnet/services/iomodule.h"
#include "iovnet/services/port.h"
#include "iovnet/services/utils.h"
{{/vendorExtensions.x-inherits-from}}

{{^vendorExtensions.x-parent}}
#include <spdlog/spdlog.h>
{{/vendorExtensions.x-parent}}

{{#vendorExtensions.x-interface-imports}}
#include "{{{this}}}.h"
{{/vendorExtensions.x-interface-imports}}

{{#vendorExtensions.x-parent}}
class {{{this}}};
{{/vendorExtensions.x-parent}}

using namespace io::swagger::server::model;
{{^vendorExtensions.x-parent}}
using iovnet::service::IOModuleType;
{{/vendorExtensions.x-parent}}

class {{classname}} : {{#vendorExtensions.x-inherits-from}}public {{{this}}}, {{/vendorExtensions.x-inherits-from}}public {{classname}}Interface {
public:
  {{^vendorExtensions.x-parent}}
  {{classname}}({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}JsonObject &conf, IOModuleType type = IOModuleType::TYPE_CLS);
  {{/vendorExtensions.x-parent}}
  {{#vendorExtensions.x-parent}}
  {{classname}}({{{this}}} &parent, {{#vendorExtensions.x-classname-inherited}}{{this}} &p, {{/vendorExtensions.x-classname-inherited}}const {{classname}}JsonObject &conf);
  {{/vendorExtensions.x-parent}}
  virtual ~{{classname}}();
  {{^vendorExtensions.x-parent}}
  std::string generate_code();
  std::vector<std::string> generate_code_vector();
  void packet_in(iovnet::service::Port &port, iovnet::service::PacketInMetadata &md, const std::vector<uint8_t> &packet) override;
  {{/vendorExtensions.x-parent}}

  {{#vendorExtensions.x-parent}}
  static void create({{{this}}} &parent, const {{classname}}JsonObject &conf);
  static std::shared_ptr<{{classname}}> getEntry({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{name}}}{{/vendorExtensions.x-is-key}}{{/vars}});
  static void removeEntry({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{name}}}{{/vendorExtensions.x-is-key}}{{/vars}});
  {{#vendorExtensions.x-is-list}}
  static std::vector<std::shared_ptr<{{classname}}>> get({{vendorExtensions.x-parent}} &parent);
  static void remove({{vendorExtensions.x-parent}} &parent);
  {{/vendorExtensions.x-is-list}}
  {{/vendorExtensions.x-parent}}
  
  void update(const {{classname}}JsonObject &conf) override;
  {{classname}}JsonObject toJsonObject() override;
  {{#vars}}
  
  /// <summary>
  /// {{description}}
  /// </summary>
  {{^isNotContainer}}
  std::shared_ptr<{{complexType}}> get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) override;
  std::vector<std::shared_ptr<{{complexType}}>> getAll{{nameInCamelCase}}() override;
  void add{{nameInCamelCase}}(const {{complexType}}JsonObject &conf) override;
  void replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) override;
  void del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) override;
  void delAll{{nameInCamelCase}}() override;
  {{/isNotContainer}}
  {{#isNotContainer}}
  {{#isPrimitiveType}}
  {{{datatype}}} {{getter}}() override;
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  void {{setter}}(const {{{datatype}}} &value) override;
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  std::shared_ptr<{{complexType}}> get{{nameInCamelCase}}() override;
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  void add{{nameInCamelCase}}(const {{complexType}}JsonObject &value) override;
  void replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{name}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) override;
  void del{{nameInCamelCase}}() override;
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isPrimitiveType}}
  {{/isNotContainer}}
  {{/vars}}
     
private:    
  {{#vendorExtensions.x-parent}}
  {{this}} &parent_;
  {{/vendorExtensions.x-parent}}
  {{^vendorExtensions.x-parent}}
  std::shared_ptr<spdlog::logger> logger;
  {{/vendorExtensions.x-parent}}
  
};

{{/model}}
{{/models}}
