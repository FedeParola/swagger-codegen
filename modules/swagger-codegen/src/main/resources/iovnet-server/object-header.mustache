{{>licenseInfo}}

#pragma once

{{#models}}{{#model}}
#include "interface/{{classname}}Interface.h"

{{#vendorExtensions.x-inherits-from}}
#include "iovnet/services/iomodule.h"
#include "iovnet/services/port.h"
#include "iovnet/services/utils.h"
{{/vendorExtensions.x-inherits-from}}

{{#vendorExtensions.x-interface-imports}}
#include "{{{this}}}.h"
{{/vendorExtensions.x-interface-imports}}

{{#vendorExtensions.x-parent}}
class {{{this}}};
{{/vendorExtensions.x-parent}}

using namespace io::swagger::server::model;

{{#vars}}
{{#isEnum}}
enum class {{classname}}{{name}}{
	{{#_enum}}{{this}} {{/_enum}} 
};

{{/isEnum}}
{{/vars}}

class {{classname}} : {{#vendorExtensions.x-inherits-from}}public {{{this}}}, {{/vendorExtensions.x-inherits-from}}public {{classname}}Interface {
public:
	{{^vendorExtensions.x-parent}}
	{{classname}}({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{baseName}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}Schema &schema);
	{{/vendorExtensions.x-parent}}
	{{#vendorExtensions.x-parent}}
	{{classname}}({{{this}}} &parent, {{#vendorExtensions.x-classname-inherited}}{{this}} &p, {{/vendorExtensions.x-classname-inherited}}const {{classname}}Schema &schema);
	{{/vendorExtensions.x-parent}}
	virtual ~{{classname}}();
	
	{{#vendorExtensions.x-parent}}
	static void create({{{this}}} &parent, const {{classname}}Schema &schema);
	static std::shared_ptr<{{classname}}> get({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{baseName}}}{{/vendorExtensions.x-is-key}}{{/vars}});
	static void remove({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{baseName}}}{{/vendorExtensions.x-is-key}}{{/vars}});
	{{#vendorExtensions.x-is-list}}
	static std::vector<std::shared_ptr<{{classname}}>> get({{vendorExtensions.x-parent}} &parent);
	static void remove({{vendorExtensions.x-parent}} &parent);
	{{/vendorExtensions.x-is-list}}
	{{/vendorExtensions.x-parent}}
	
	void update(const {{classname}}Schema &schema) override;
	{{classname}}Schema toSchema() override;
    {{#vars}}
    
    /// <summary>
    /// {{description}}
    /// </summary>
    {{^isNotContainer}}
    std::shared_ptr<{{complexType}}> get_{{name}}({{#vendorExtensions.x-key-list}}const {{type}} &{{name}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) override;
    std::vector<std::shared_ptr<{{complexType}}>> get_All_{{name}}() override;
	void add_{{name}}(const {{complexType}}Schema &conf) override;
	void del_{{name}}({{#vendorExtensions.x-key-list}}const {{type}} &{{name}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) override;
	void del_All_{{name}}() override;
    {{/isNotContainer}}
    {{#isNotContainer}}
    {{#isPrimitiveType}}
    {{{datatype}}} {{getter}}() override;
    {{^vendorExtensions.x-is-key}}
    {{^isReadOnly}}
    void {{setter}}({{{datatype}}} &value) override;
    {{/isReadOnly}}
    {{/vendorExtensions.x-is-key}}
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    std::shared_ptr<{{complexType}}> get_{{name}}() override;
    {{^vendorExtensions.x-is-key}}
    {{^isReadOnly}}
    void add_{{name}}(const {{complexType}}Schema &value) override;
    void del_{{name}}() override;
    {{/isReadOnly}}
    {{/vendorExtensions.x-is-key}}
    {{/isPrimitiveType}}
    {{/isNotContainer}}
    {{/vars}}
       
	{{#vendorExtensions.x-parent}}
private:	
	{{this}} &parent_;
	{{/vendorExtensions.x-parent}}	
	
};

{{/model}}
{{/models}}
