{{>licenseInfo}}

//Modify these methods with your own implementation

{{#models}}{{#model}}
#include "src/{{classname}}.h"
{{^vendorExtensions.x-parent}}
#include "{{classname}}_dp.h"

{{classname}}::{{classname}}({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}JsonObject &conf, IOModuleType type)
                             : IOModule(name, generate_code(), type),
                             logger(spdlog::get("iov-{{classVarName}}")== nullptr
                                    ? spdlog::stdout_logger_mt("iov-{{classVarName}}")
                                    : spdlog::get("iov-{{classVarName}}")) {
  logger->info("Creating {{classname}} instance {0}", name);

  {{#vars}}
  {{^isNotContainer}}
  add{{nameInCamelCase}}List(conf.{{getter}}());
  {{/isNotContainer}}
  {{#isNotContainer}} 
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  if(conf.{{name}}IsSet()){
  {{#isPrimitiveType}}
      {{setter}}(conf.{{getter}}());
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
      auto value = conf.{{getter}}();
      {{#vendorExtensions.x-key-list}}
      {{type}} {{varName}}_ = value.{{getter}}();
      {{/vendorExtensions.x-key-list}}
      add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}, {{/vendorExtensions.x-key-list}}conf.{{getter}}());
  {{/isPrimitiveType}}
  }
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isNotContainer}}
  {{/vars}}   

}
{{/vendorExtensions.x-parent}}

{{#vendorExtensions.x-parent}}
{{classname}}::{{classname}}({{{this}}} &parent, {{#vendorExtensions.x-classname-inherited}}{{this}} &p, {{/vendorExtensions.x-classname-inherited}}const {{classname}}JsonObject &conf): parent_(parent){{#vendorExtensions.x-classname-inherited}}, {{this}}(p){{/vendorExtensions.x-classname-inherited}} { }
{{/vendorExtensions.x-parent}}

{{classname}}::~{{classname}}() { }

void {{classname}}::update(const {{classname}}JsonObject &conf) { 

  //This method updates all the object/parameter in {{classname}} object specified in the conf JsonObject.
  //You can modify this implementation.

  {{#vars}}
  {{^required}}
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  if(conf.{{name}}IsSet()){
    {{^isNotContainer}}
    for(auto &i : conf.{{getter}}()){ 
      {{#vendorExtensions.x-key-list}}
      auto {{varName}} = i.{{getter}}();
      {{/vendorExtensions.x-key-list}}
      auto m = get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
      m->update(i);
    }
    {{/isNotContainer}}
    {{#isNotContainer}}
    {{#isPrimitiveType}}
    {{setter}}(conf.{{getter}}());
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    auto m = {{getter}}();
    m->update(conf.{{getter}}());
    {{/isPrimitiveType}}
    {{/isNotContainer}}
  }
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/required}}
  {{#required}}
  {{^isNotContainer}}
  for(auto &i : conf.{{getter}}()){ 
    {{#vendorExtensions.x-key-list}}
    auto {{varName}} = i.{{getter}}();
    {{/vendorExtensions.x-key-list}}
    auto m = get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
    m->update(i);
  }
  {{/isNotContainer}}
  {{#isNotContainer}}
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  {{#isPrimitiveType}}
  {{setter}}(conf.{{getter}}());
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  auto m = {{getter}}();
  m->update(conf.{{getter}}());
  {{/isPrimitiveType}}
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isNotContainer}}
  {{/required}}
  {{/vars}}
}

{{classname}}JsonObject {{classname}}::toJsonObject(){
  {{classname}}JsonObject conf;
  
  {{#vars}}
  {{#isNotContainer}}
  {{#isPrimitiveType}}
  conf.{{setter}}({{getter}}());
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  conf.{{setter}}({{getter}}()->toJsonObject());
  {{/isPrimitiveType}}
  {{/isNotContainer}}
  {{/vars}}
  
  return conf;
}

{{^vendorExtensions.x-parent}}
std::string {{classname}}::generate_code(){
  return {{classVarName}}_code;
}

std::vector<std::string> {{classname}}::generate_code_vector(){
  throw std::runtime_error("Method not implemented");
}

void {{classname}}::packet_in(iovnet::service::Port &port, iovnet::service::PacketInMetadata &md, const std::vector<uint8_t> &packet){
  logger->info("{{classname}} {0}: Packet received from port {1}", IOModule::get_name(), port.name());
}

{{/vendorExtensions.x-parent}}
{{#vendorExtensions.x-parent}}
void {{classname}}::create({{{this}}} &parent, {{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} &{{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}JsonObject &conf){

  //This method creates the actual {{classname}} object given thee key param. 
  //Please remember to call here the create static method for all sub-objects of {{classname}}.
  
  throw std::runtime_error("[{{classname}}]: Method create not implemented");
}

std::shared_ptr<{{classname}}> {{classname}}::getEntry({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{name}}}{{/vendorExtensions.x-is-key}}{{/vars}}){
  
  //This method retrieves the pointer to {{classname}} object specified by its keys.
  
  throw std::runtime_error("[{{classname}}]: Method getEntry not implemented");
}

void {{classname}}::removeEntry({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{name}}}{{/vendorExtensions.x-is-key}}{{/vars}}){
  
  //This method removes the single {{classname}} object specified by its keys.
  //Remember to call here the remove static method for all-sub-objects of {{classname}}.
  
  throw std::runtime_error("[{{classname}}]: Method removeEntry not implemented");
}

{{#vendorExtensions.x-is-list}}
std::vector<std::shared_ptr<{{classname}}>> {{classname}}::get({{vendorExtensions.x-parent}} &parent){
  
  //This methods get the pointers to all the {{classname}} objects in {{vendorExtensions.x-parent}}.
  
  throw std::runtime_error("[{{classname}}]: Method get not implemented");
}

void {{classname}}::remove({{vendorExtensions.x-parent}} &parent){

  //This method removes all {{classname}} objects in {{vendorExtensions.x-parent}}.
  //Remember to call here the remove static method for all-sub-objects of {{classname}}.

  throw std::runtime_error("[{{classname}}]: Method remove not implemented");
}
{{/vendorExtensions.x-is-list}}
{{/vendorExtensions.x-parent}}


{{#vars}}
{{#isNotContainer}}

{{#isPrimitiveType}}
{{{datatype}}} {{classname}}::{{getter}}(){
  
  //This method retrieves the {{name}} value.  
  
  throw std::runtime_error("[{{classname}}]: Method {{getter}} not implemented");
}

{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}
void {{classname}}::{{setter}}(const {{{datatype}}} &value){
  
  //This method set the {{name}} value.

  throw std::runtime_error("[{{classname}}]: Method {{setter}} not implemented");
}

{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{/isNotContainer}}
{{/vars}}

{{/model}}{{/models}}
