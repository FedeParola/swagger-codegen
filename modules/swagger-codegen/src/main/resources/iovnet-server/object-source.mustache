{{>licenseInfo}}

//Modify these methods with your own implementation

{{#models}}{{#model}}
#include "{{classname}}.h"
{{^vendorExtensions.x-parent}}
#include "{{classname}}_dp.h"

{{classname}}::{{classname}}({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}JsonObject &conf, IOModuleType type): IOModule(name, generate_code(), type){
  {{#vars}}
  {{^isNotContainer}}
  for(auto &i : conf.{{getter}}())
      add{{nameInCamelCase}}(i);
  {{/isNotContainer}}
  {{#isNotContainer}} 
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  if(conf.{{name}}IsSet())
  {{#isPrimitiveType}}
      {{setter}}(conf.{{getter}}());
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
      add{{nameInCamelCase}}(conf.{{getter}}());
  {{/isPrimitiveType}}
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isNotContainer}}
  {{/vars}}   

}
{{/vendorExtensions.x-parent}}

{{#vendorExtensions.x-parent}}
{{classname}}::{{classname}}({{{this}}} &parent, {{#vendorExtensions.x-classname-inherited}}{{this}} &p, {{/vendorExtensions.x-classname-inherited}}const {{classname}}JsonObject &conf): parent_(parent){{#vendorExtensions.x-classname-inherited}}, {{this}}(p){{/vendorExtensions.x-classname-inherited}} { }
{{/vendorExtensions.x-parent}}

{{classname}}::~{{classname}}() { }

void {{classname}}::update(const {{classname}}JsonObject &conf) { 

  {{#vars}}
  {{^isNotContainer}}
  for(auto &i : conf.{{getter}}()){ 
    {{#vendorExtensions.x-key-list}}
    auto {{varName}} = i.{{getter}}();
    {{/vendorExtensions.x-key-list}}
    auto m = get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
    m->update(i);
  }
  {{/isNotContainer}}
  {{#isNotContainer}}
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  if(conf.{{name}}IsSet()){
  {{#isPrimitiveType}}
    {{setter}}(conf.{{getter}}());
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
    auto m = {{getter}}();
    m->update(conf.{{getter}}());
  {{/isPrimitiveType}}
  }
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isNotContainer}}
  {{/vars}}
}

{{classname}}JsonObject {{classname}}::toJsonObject(){
  {{classname}}JsonObject conf;
  
  {{#vars}}
  {{#isNotContainer}}
  {{#isPrimitiveType}}
  conf.{{setter}}({{getter}}());
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  conf.{{setter}}({{getter}}()->toJsonObject());
  {{/isPrimitiveType}}
  {{/isNotContainer}}
  {{/vars}}
  
  return conf;
}

{{#vendorExtensions.x-parent}}
void {{classname}}::create({{{this}}} &parent, const {{classname}}JsonObject &conf){
  throw std::runtime_error("Method not implemented");
}

std::shared_ptr<{{classname}}> {{classname}}::getEntry({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{name}}}{{/vendorExtensions.x-is-key}}{{/vars}}){
  throw std::runtime_error("Method not implemented");
}

void {{classname}}::removeEntry({{{this}}} &parent{{#vars}}{{#vendorExtensions.x-is-key}}, const {{{datatype}}} &{{{name}}}{{/vendorExtensions.x-is-key}}{{/vars}}){
  throw std::runtime_error("Method not implemented");
}

{{#vendorExtensions.x-is-list}}
std::vector<std::shared_ptr<{{classname}}>> {{classname}}::get({{vendorExtensions.x-parent}} &parent){
  throw std::runtime_error("Method not implemented");
}

void {{classname}}::remove({{vendorExtensions.x-parent}} &parent){
  throw std::runtime_error("Method not implemented");
}
{{/vendorExtensions.x-is-list}}
{{/vendorExtensions.x-parent}}


{{#vars}}
{{#isNotContainer}}

{{#isPrimitiveType}}
{{{datatype}}} {{classname}}::{{getter}}(){
  throw std::runtime_error("Method not implemented");
}

{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}
void {{classname}}::{{setter}}(const {{{datatype}}} &value){
  throw std::runtime_error("Method not implemented");
}

{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{/isNotContainer}}
{{/vars}}

{{/model}}{{/models}}
