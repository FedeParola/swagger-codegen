{{>licenseInfo}}

/* Do not edit this file manually */

{{#models}}{{#model}}

#include "{{classname}}JsonObject.h"

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{classname}}JsonObject::{{classname}}JsonObject() {
  {{#vars}}{{#isNotContainer}}{{#isPrimitiveType}}{{^isEnum}}m_{{name}} = {{{defaultValue}}};{{/isEnum}}
  {{/isPrimitiveType}}{{^isPrimitiveType}}{{#isString}}{{^isEnum}}m_{{name}} = {{{defaultValue}}};{{/isEnum}}
  {{/isString}}{{#isDateTime}}{{^isEnum}}m_{{name}} = {{{defaultValue}}};{{/isEnum}}
  {{/isDateTime}}{{/isPrimitiveType}}{{/isNotContainer}}{{^required}}m_{{name}}IsSet = false;
  {{/required}}{{/vars}}
}

{{classname}}JsonObject::~{{classname}}JsonObject() {}

void {{classname}}JsonObject::validate() {
  // TODO: implement validation
}

nlohmann::json {{classname}}JsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}{{#isPrimitiveType}}{{^isListContainer}}{{^required}}if(m_{{name}}IsSet) {
      val["{{baseName}}"] = {{#isEnum}}{{{datatype}}}_to_string(m_{{name}}){{/isEnum}}{{^isEnum}}m_{{name}}{{/isEnum}};
  }

  {{/required}}{{#required}}val["{{baseName}}"] = {{#isEnum}}{{{datatype}}}_to_string(m_{{name}}){{/isEnum}}{{^isEnum}}m_{{name}}{{/isEnum}};
  {{/required}}{{/isListContainer}}{{/isPrimitiveType}}{{#isListContainer}}
  {
    nlohmann::json jsonArray;
    for (auto& item : m_{{name}}) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }
    {{#required}}val["{{baseName}}"] = jsonArray;
    {{/required}}{{^required}}
    if (jsonArray.size() > 0) {
      val["{{baseName}}"] = jsonArray;
    }
    {{/required}}
  }
  {{/isListContainer}}{{^isListContainer}}{{^isPrimitiveType}}{{^required}}if(m_{{name}}IsSet) {
      val["{{baseName}}"] = JsonObjectBase::toJson(m_{{name}});
  }
  {{/required}}{{#required}}val["{{baseName}}"] = JsonObjectBase::toJson(m_{{name}});
  {{/required}}{{/isPrimitiveType}}{{/isListContainer}}{{/vars}}

  return val;
}

void {{classname}}JsonObject::fromJson(nlohmann::json& val) {
  {{#vars}}
  {{#isPrimitiveType}}{{^isListContainer}}
  {{^required}}
  if (val.find("{{baseName}}") != val.end()) {
      {{setter}}({{#isEnum}}string_to_{{{datatype}}}(val.at("{{baseName}}")){{/isEnum}}{{^isEnum}}val.at("{{baseName}}"){{/isEnum}});
  }
  {{/required}}
  {{#required}}
  {{setter}}({{#isEnum}}string_to_{{{datatype}}}(val.at("{{baseName}}")){{/isEnum}}{{^isEnum}}val.at("{{baseName}}"){{/isEnum}});
  {{/required}}{{/isListContainer}}
  {{/isPrimitiveType}}
  {{#isListContainer}}
  m_{{name}}.clear();
  for (auto& item : val["{{baseName}}"]) {
      {{#isPrimitiveType}}m_{{name}}.push_back(item);
      {{/isPrimitiveType}}{{^isPrimitiveType}}{{#items.isString}}m_{{name}}.push_back(item);
      {{/items.isString}}{{^items.isString}}{{#items.isDateTime}}m_{{name}}.push_back(item);
      {{/items.isDateTime}}{{^items.isDateTime}}
      {{{items.datatype}}}JsonObject newItem;
      newItem.fromJson(item);
      m_{{name}}.push_back(newItem);
      {{/items.isDateTime}}{{/items.isString}}{{/isPrimitiveType}}
  }
  {{/isListContainer}}
  {{^isListContainer}}{{^isPrimitiveType}}{{^required}}
  if (val.find("{{baseName}}") != val.end()) {
      {{#isString}}{{setter}}(val.at("{{baseName}}"));
      {{/isString}}{{^isString}}{{#isDateTime}}{{setter}}(val.at("{{baseName}}"));
      {{/isDateTime}}{{^isDateTime}}
      if (!val["{{baseName}}"].is_null()) {
          {{{datatype}}}JsonObject newItem;
          newItem.fromJson(val["{{baseName}}"]);
          {{setter}}(newItem);
      }
      {{/isDateTime}}{{/isString}}
  }
  {{/required}}{{#required}}{{#isString}}{{setter}}(val.at("{{baseName}}"));
  {{/isString}}{{^isString}}{{#isDateTime}}{{setter}}(val.at("{{baseName}}"));
  {{/isDateTime}}{{/isString}}{{/required}}{{/isPrimitiveType}}{{/isListContainer}}
  {{/vars}}
}

nlohmann::json {{classname}}JsonObject::getKeys() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{#vendorExtensions.x-is-key}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  val["{{baseName}}"]["type"] = "key";
  {{#isString}}
  val["{{baseName}}"]["simpletype"] = "string";
  {{/isString}}
  {{#isInteger}}
  val["{{baseName}}"]["simpletype"] = "integer";
  {{/isInteger}}
  {{#isBoolean}}
  val["{{baseName}}"]["simpletype"] = "boolean";
  {{/isBoolean}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  {{/vendorExtensions.x-is-key}}
  {{/vars}}

  return val;
}

nlohmann::json {{classname}}JsonObject::getElements() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{^vendorExtensions.x-is-key}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  val["{{baseName}}"]["type"] = "leaf"; // Suppose that type is leaf
  {{#isListContainer}}
  val["{{baseName}}"]["type"] = "list";
  {{/isListContainer}}
  {{#isString}}
  val["{{baseName}}"]["simpletype"] = "string";
  {{/isString}}
  {{#isInteger}}
  val["{{baseName}}"]["simpletype"] = "integer";
  {{/isInteger}}
  {{#isBoolean}}
  val["{{baseName}}"]["simpletype"] = "boolean";
  {{/isBoolean}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  val["{{baseName}}"]["jsonSchema"] = nlohmann::json::parse(R"IOVNET({{{jsonSchema}}})IOVNET");
  {{/vendorExtensions.x-is-key}}
  {{/vars}}

  return val;
}

nlohmann::json {{classname}}JsonObject::getWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  {{#isPrimitiveType}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  {{#isString}}
  val["{{baseName}}"]["simpletype"] = "string";
  {{/isString}}
  {{#isInteger}}
  val["{{baseName}}"]["simpletype"] = "integer";
  {{/isInteger}}
  {{#isBoolean}}
  val["{{baseName}}"]["simpletype"] = "boolean";
  {{/isBoolean}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  val["{{baseName}}"]["jsonSchema"] = nlohmann::json::parse(R"IOVNET({{{jsonSchema}}})IOVNET");
  {{/isPrimitiveType}}
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/vars}}

  return val;
}

nlohmann::json {{classname}}JsonObject::getComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{^isPrimitiveType}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  {{#isListContainer}}
  val["{{baseName}}"]["type"] = "list";
  {{/isListContainer}}
  {{^isListContainer}}
  val["{{baseName}}"]["type"] = "complex";
  {{/isListContainer}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  {{/isPrimitiveType}}
  {{/vars}}

  return val;
}

{{#vars}}{{^isNotContainer}}const std::vector<{{complexType}}JsonObject>& {{classname}}JsonObject::{{getter}}() const{
  return m_{{name}};
}

{{/isNotContainer}}{{#isNotContainer}}{{{datatype}}}{{^isPrimitiveType}}JsonObject{{/isPrimitiveType}} {{classname}}JsonObject::{{getter}}() const {
  return m_{{name}};
}

void {{classname}}JsonObject::{{setter}}({{{datatype}}}{{^isPrimitiveType}}JsonObject{{/isPrimitiveType}} value) {
  m_{{name}} = value;
  {{^required}}m_{{name}}IsSet = true;{{/required}}
}
{{/isNotContainer}}

{{^required}}bool {{classname}}JsonObject::{{name}}IsSet() const {
  return m_{{name}}IsSet;
}

void {{classname}}JsonObject::unset{{nameInCamelCase}}() {
  m_{{name}}IsSet = false;
}
{{/required}}
{{#isEnum}}

std::string {{classname}}JsonObject::{{{datatype}}}_to_string(const {{{datatype}}} &value){
  switch(value){
    {{#allowableValues.values}}
    case {{{datatype}}}::{{value}}:
      return "{{value}}";
    {{/allowableValues.values}}
    default:
      throw std::runtime_error("Bad {{classname}} {{name}}");
  }
}

{{{datatype}}} {{classname}}JsonObject::string_to_{{{datatype}}}(const std::string &str){
  {{#allowableValues.values}}
  if(JsonObjectBase::iequals("{{stringValue}}", str))
    return {{{datatype}}}::{{value}};
  {{/allowableValues.values}}
  throw std::runtime_error("{{classname}} {{name}} is invalid");
}
{{/isEnum}}
{{/vars}}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
