{{>licenseInfo}}

/* Do not edit this file manually */

{{#models}}{{#model}}

#include "{{classname}}JsonObject.h"
#include <regex>

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{classname}}JsonObject::{{classname}}JsonObject() {
{{#vars}}{{#vendorExtensions.x-has-default-value}}{{#isNotContainer}}{{#isPrimitiveType}}
  m_{{name}} = {{{defaultValue}}};{{/isPrimitiveType}}{{^isPrimitiveType}}{{#isString}}
  m_{{name}} = {{{defaultValue}}};{{/isString}}{{#isDateTime}}
  m_{{name}} = {{{defaultValue}}};{{/isDateTime}}{{#isEnum}}
  m_{{name}} = {{{defaultValue}}};{{/isEnum}}{{/isPrimitiveType}}{{/isNotContainer}}
  m_{{name}}IsSet = false;{{/vendorExtensions.x-has-default-value}}{{^vendorExtensions.x-has-default-value}}
  m_{{name}}IsSet = false;{{/vendorExtensions.x-has-default-value}}
{{/vars}}
}

{{classname}}JsonObject::~{{classname}}JsonObject() {}

void {{classname}}JsonObject::validateKeys() {
{{#vars}}{{#vendorExtensions.x-is-key}}{{#isPrimitiveType}}
  if (!m_{{name}}IsSet) {
    throw std::runtime_error("Variable {{baseName}} is required");
  }{{/isPrimitiveType}}{{/vendorExtensions.x-is-key}}{{/vars}}
}

void {{classname}}JsonObject::validateMandatoryFields() {
{{#vars}}{{#vendorExtensions.x-is-required}}{{#isPrimitiveType}}
  if (!m_{{name}}IsSet) {
    throw std::runtime_error("Variable {{baseName}} is required");
  }{{/isPrimitiveType}}{{/vendorExtensions.x-is-required}}{{/vars}}
}

void {{classname}}JsonObject::validateParams() {
{{#vars}}{{#hasValidation}}{{#isString}}
  if (m_{{name}}IsSet) {
    std::string patter_value = R"PATTERN({{dataFormat}})PATTERN";
    std::regex e (patter_value);
    if (!std::regex_match(m_{{name}}, e))
      throw std::runtime_error("Variable {{baseName}} has not a valid format");
  }{{/isString}}{{#isInteger}}
  if (m_{{name}}IsSet) {
    if (m_{{name}} < {{minimum}} || m_{{name}} > {{maximum}}) {
      throw std::runtime_error("Variable {{baseName}} is not in the range");
    }
  }{{/isInteger}}{{/hasValidation}}{{/vars}}
}

nlohmann::json {{classname}}JsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

{{#vars}}{{#isPrimitiveType}}{{^isListContainer}}{{^vendorExtensions.x-is-required}}  if (m_{{name}}IsSet) {
    val["{{baseName}}"] = {{#isEnum}}{{{datatype}}}_to_string(m_{{name}}){{/isEnum}}{{^isEnum}}m_{{name}}{{/isEnum}};
  }

{{/vendorExtensions.x-is-required}}{{#vendorExtensions.x-is-required}}  val["{{baseName}}"] = {{#isEnum}}{{{datatype}}}_to_string(m_{{name}}){{/isEnum}}{{^isEnum}}m_{{name}}{{/isEnum}};
{{/vendorExtensions.x-is-required}}{{/isListContainer}}{{/isPrimitiveType}}{{#isListContainer}}  {
    nlohmann::json jsonArray;
    for (auto& item : m_{{name}}) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }
{{#vendorExtensions.x-is-required}}    val["{{baseName}}"] = jsonArray;
{{/vendorExtensions.x-is-required}}{{^vendorExtensions.x-is-required}}
    if (jsonArray.size() > 0) {
      val["{{baseName}}"] = jsonArray;
    }
{{/vendorExtensions.x-is-required}}
  }
{{/isListContainer}}{{^isListContainer}}{{^isPrimitiveType}}{{^vendorExtensions.x-is-required}}  if (m_{{name}}IsSet) {
    val["{{baseName}}"] = JsonObjectBase::toJson(m_{{name}});
  }
{{/vendorExtensions.x-is-required}}{{#vendorExtensions.x-is-required}}  val["{{baseName}}"] = JsonObjectBase::toJson(m_{{name}});
{{/vendorExtensions.x-is-required}}{{/isPrimitiveType}}{{/isListContainer}}{{/vars}}
  return val;
}

void {{classname}}JsonObject::fromJson(nlohmann::json& val) {
  for(nlohmann::json::iterator it = val.begin(); it != val.end(); ++it) {
    std::string key = it.key();
    bool found = (std::find(allowedParameters_.begin(), allowedParameters_.end(), key) != allowedParameters_.end());
    if (!found) {
      throw std::runtime_error(key + " is not a valid parameter");
      return;
    }
  }
{{#vars}}
{{#isPrimitiveType}}{{^isListContainer}}
  if (val.find("{{baseName}}") != val.end()) {
    {{setter}}({{#isEnum}}string_to_{{{datatype}}}(val.at("{{baseName}}")){{/isEnum}}{{^isEnum}}val.at("{{baseName}}"){{/isEnum}});
  }{{/isListContainer}}{{/isPrimitiveType}}{{#isListContainer}}
  m_{{name}}.clear();
  for (auto& item : val["{{baseName}}"]) {
{{#isPrimitiveType}}
    m_{{name}}.push_back(item);{{/isPrimitiveType}}{{^isPrimitiveType}}{{#items.isString}}
    m_{{name}}.push_back(item);{{/items.isString}}{{^items.isString}}{{#items.isDateTime}}
    m_{{name}}.push_back(item);{{/items.isDateTime}}{{^items.isDateTime}}
    {{{items.datatype}}}JsonObject newItem;
    newItem.fromJson(item);
    m_{{name}}.push_back(newItem);{{/items.isDateTime}}{{/items.isString}}
    m_{{name}}IsSet = true;{{/isPrimitiveType}}
  }
{{/isListContainer}}{{^isListContainer}}{{^isPrimitiveType}}
  if (val.find("{{baseName}}") != val.end()) {
{{#isString}}    {{setter}}(val.at("{{baseName}}"));{{/isString}}{{^isString}}
{{#isDateTime}}    {{setter}}(val.at("{{baseName}}"));{{/isDateTime}}{{^isDateTime}}
    if (!val["{{baseName}}"].is_null()) {
      {{{datatype}}}JsonObject newItem;
      newItem.fromJson(val["{{baseName}}"]);
      {{setter}}(newItem);
    }{{/isDateTime}}{{/isString}}
  }{{/isPrimitiveType}}{{/isListContainer}}
{{/vars}}
}

nlohmann::json {{classname}}JsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{#vendorExtensions.x-is-key}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  val["{{baseName}}"]["type"] = "key";
  {{#isString}}
  val["{{baseName}}"]["simpletype"] = "string";
  {{/isString}}
  {{#isInteger}}
  val["{{baseName}}"]["simpletype"] = "integer";
  {{/isInteger}}
  {{#isBoolean}}
  val["{{baseName}}"]["simpletype"] = "boolean";
  {{/isBoolean}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  {{/vendorExtensions.x-is-key}}
  {{/vars}}

  return val;
}

nlohmann::json {{classname}}JsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{^vendorExtensions.x-is-key}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  val["{{baseName}}"]["type"] = "leaf"; // Suppose that type is leaf
  {{#isListContainer}}
  val["{{baseName}}"]["type"] = "list";
  {{/isListContainer}}
  {{#isString}}
  val["{{baseName}}"]["simpletype"] = "string";
  {{/isString}}
  {{#isInteger}}
  val["{{baseName}}"]["simpletype"] = "integer";
  {{/isInteger}}
  {{#isBoolean}}
  val["{{baseName}}"]["simpletype"] = "boolean";
  {{/isBoolean}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  {{/vendorExtensions.x-is-key}}
  {{/vars}}

  return val;
}

nlohmann::json {{classname}}JsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  {{#isPrimitiveType}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  {{#isString}}
  val["{{baseName}}"]["simpletype"] = "string";
  {{/isString}}
  {{#isInteger}}
  val["{{baseName}}"]["simpletype"] = "integer";
  {{/isInteger}}
  {{#isBoolean}}
  val["{{baseName}}"]["simpletype"] = "boolean";
  {{/isBoolean}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  {{/isPrimitiveType}}
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/vars}}

  return val;
}

nlohmann::json {{classname}}JsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  {{#vars}}
  {{^isPrimitiveType}}
  val["{{baseName}}"]["name"] = "{{baseName}}";
  {{#isListContainer}}
  val["{{baseName}}"]["type"] = "list";
  {{/isListContainer}}
  {{^isListContainer}}
  val["{{baseName}}"]["type"] = "complex";
  {{/isListContainer}}
  val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
  val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
  {{/isPrimitiveType}}
  {{/vars}}

  return val;
}

std::vector<std::string> {{classname}}JsonObject::helpActions() {
  std::vector<std::string> val;
  {{#vendorExtensions.x-has-yang-actions}}
  {{#vendorExtensions.x-yang-actions}}
  val.push_back("{{x-yang-action-baseName}}");
  {{/vendorExtensions.x-yang-actions}}
  {{/vendorExtensions.x-has-yang-actions}}
  return val;
}

{{#vars}}{{^isNotContainer}}const std::vector<{{complexType}}JsonObject>& {{classname}}JsonObject::{{getter}}() const{
  return m_{{name}};
}

void {{classname}}JsonObject::add{{complexType}}({{complexType}}JsonObject value) {
  m_{{name}}.push_back(value);
}

{{/isNotContainer}}{{#isNotContainer}}{{{datatype}}}{{^isPrimitiveType}}JsonObject{{/isPrimitiveType}} {{classname}}JsonObject::{{getter}}() const {
  return m_{{name}};
}

void {{classname}}JsonObject::{{setter}}({{{datatype}}}{{^isPrimitiveType}}JsonObject{{/isPrimitiveType}} value) {
  m_{{name}} = value;
  m_{{name}}IsSet = true;
}
{{/isNotContainer}}

bool {{classname}}JsonObject::{{name}}IsSet() const {
  return m_{{name}}IsSet;
}

void {{classname}}JsonObject::unset{{nameInCamelCase}}() {
  m_{{name}}IsSet = false;
}

{{#isEnum}}
std::string {{classname}}JsonObject::{{{datatype}}}_to_string(const {{{datatype}}} &value){
  switch(value){
    {{#allowableValues.values}}
    case {{{datatype}}}::{{value}}:
      return std::string("{{stringValue}}");
    {{/allowableValues.values}}
    default:
      throw std::runtime_error("Bad {{classname}} {{name}}");
  }
}

{{{datatype}}} {{classname}}JsonObject::string_to_{{{datatype}}}(const std::string &str){
  {{#allowableValues.values}}
  if (JsonObjectBase::iequals("{{stringValue}}", str))
    return {{{datatype}}}::{{value}};
  {{/allowableValues.values}}
  throw std::runtime_error("{{classname}} {{name}} is invalid");
}
{{/isEnum}}

{{#vendorExtensions.x-is-iomodule-debug}}
  iovnet::LogLevel {{classname}}JsonObject::getIovnetLoglevel() const {
    switch(m_{{name}}) {
      case {{{datatype}}}::TRACE:
        return iovnet::LogLevel::TRACE;
      case {{{datatype}}}::DEBUG:
        return iovnet::LogLevel::DEBUG;
      case {{{datatype}}}::INFO:
        return iovnet::LogLevel::INFO;
      case {{{datatype}}}::WARN:
        return iovnet::LogLevel::WARN;
      case {{{datatype}}}::ERR:
        return iovnet::LogLevel::ERR;
      case {{{datatype}}}::CRITICAL:
        return iovnet::LogLevel::CRITICAL;
      case {{{datatype}}}::OFF:
        return iovnet::LogLevel::OFF;
    }
  }{{/vendorExtensions.x-is-iomodule-debug}}
{{/vars}}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
