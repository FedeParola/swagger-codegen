{{>licenseInfo}}
{{#operations}}

#include "{{classname}}.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

{{classname}}::{{classname}}(Net::Address addr)
    : httpEndpoint(std::make_shared<Net::Http::Endpoint>(addr))
{ };

void {{classname}}::init(size_t thr = 2) {
    auto opts = Net::Http::Endpoint::options()
        .threads(thr)
        .flags(Net::Tcp::Options::InstallSignalHandler);
    httpEndpoint->init(opts);
    setupRoutes();
}

void {{classname}}::start() {
    httpEndpoint->setHandler(router.handler());
    httpEndpoint->serve();
}

void {{classname}}::shutdown() {
    httpEndpoint->shutdown();
}

void {{classname}}::setupRoutes() {
    using namespace Net::Rest;

    {{#operation}}
    {{#isRestfulCreate}}
    Routes::Post(router, base + "{{{vendorExtensions.x-codegen-pistache-path}}}", Routes::bind(&{{classname}}::{{operationIdSnakeCase}}_handler, this));
    {{/isRestfulCreate}}
    {{/operation}}

    {{#operation}}
    {{#isRestfulUpdate}}
    Routes::Put(router, base + "{{{vendorExtensions.x-codegen-pistache-path}}}", Routes::bind(&{{classname}}::{{operationIdSnakeCase}}_handler, this));
    {{/isRestfulUpdate}}
    {{/operation}}

    {{#operation}}
    {{#isRestfulShow}}
    Routes::Get(router, base + "{{{vendorExtensions.x-codegen-pistache-path}}}", Routes::bind(&{{classname}}::{{operationIdSnakeCase}}_handler, this));
    {{/isRestfulShow}}
    {{/operation}}

    {{#operation}}
    {{#isRestfulDestroy}}
    Routes::Delete(router, base + "{{{vendorExtensions.x-codegen-pistache-path}}}", Routes::bind(&{{classname}}::{{operationIdSnakeCase}}_handler, this));
    {{/isRestfulDestroy}}
    {{/operation}}
}

{{#operation}}
{{#isRestful}}
void {{classname}}::{{operationIdSnakeCase}}_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
    {{#hasPathParams}}
    // Getting the path params
    {{#pathParams}}
    auto {{paramName}} = request.param(":{{paramName}}").as<{{dataType}}>();
    {{/pathParams}}
    {{/hasPathParams}}
    {{#hasBodyParam}}
    // Getting the body param
    {{#bodyParam}}
    {{^isPrimitiveType}}
    auto {{paramName}} = std::make_shared<{{baseType}}>();{{/isPrimitiveType}}
    {{#isPrimitiveType}}
    {{dataType}} {{paramName}};
    {{/isPrimitiveType}}
    {{/bodyParam}}
    {{/hasBodyParam}}

    try {
    {{#hasBodyParam}}
    {{#bodyParam}}
      web::json::value request_body = web::json::value::parse(request.body());
    {{^isPrimitiveType}}
      {{paramName}}->fromJson(request_body); {{/isPrimitiveType}}
    {{#isPrimitiveType}}
    {{#isString}}
      {{paramName}} = ModelBase::stringFromJson(request_body);
    {{/isString}}
    {{#isDate}}
      {{paramName}} = ModelBase::dateFromJson(request_body);
    {{/isDate}}
    {{^vendorExtensions.x-codegen-pistache-isStringOrDate}}
      {{paramName}} = ModelBase::{{{dataType}}}FromJson(request_body);
    {{/vendorExtensions.x-codegen-pistache-isStringOrDate}}
    {{/isPrimitiveType}}
    {{/bodyParam}}
    {{/hasBodyParam}}

      this->{{operationIdSnakeCase}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}, response);

    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Net::Http::Code::Bad_Request, e.what());
      return;
    }

}

{{/isRestful}}
{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
