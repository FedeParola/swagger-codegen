{{>licenseInfo}}

#ifndef _REST_SERVER_H
#define _REST_SERVER_H

#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <spdlog/spdlog.h>
#include "model/BridgeSchema.h"

class RestServer {
public:
    RestServer(Net::Address addr);
    void init(size_t thr);
    void start();
    void shutdown();

    const std::string base = "/v1";

    virtual ~RestServer() {};

private:
    void setupRoutes();

    void create_bridge_by_id(const Net::Rest::Request &request, Net::Http::ResponseWriter response);
    void read_bridge_by_id(const Net::Rest::Request &request, Net::Http::ResponseWriter response);
    void update_bridge_by_id(const Net::Rest::Request &request, Net::Http::ResponseWriter response);
    void delete_bridge_by_id(const Net::Rest::Request &request, Net::Http::ResponseWriter response);

    std::shared_ptr<Net::Http::Endpoint> httpEndpoint;
    Net::Rest::Router router;

    std::shared_ptr<spdlog::logger> l;

    virtual void createBridgeByID(const std::string name, const io::swagger::client::model::BridgeSchema &bridge, Net::Http::ResponseWriter &response) = 0;
    virtual void readBridgeByID(const std::string name, Net::Http::ResponseWriter &response) = 0;
    virtual void updateBridgeByID(const std::string name, const io::swagger::client::model::BridgeSchema &bridge, Net::Http::ResponseWriter &response) = 0;
    virtual void deleteBridgeByID(const std::string name, Net::Http::ResponseWriter &response) = 0;

};


#endif
