{{>partial_header}}

package cmd

{{#operations}}

import (
  {{#imports}}
  "{{{import}}}"
  {{/imports}}
  "github.com/sebymiano/cobra"
)

{{#operation}}
{{! If there is not a create method available for that operation
we do not create the command }}
{{#isRestfulUpdate}}
{{#vendorExtensions.x-cliParam}}
var {{commandName}} = &cobra.Command {
  Use:      "{{commandUse}}",
  Short:    "{{summary}}",
  {{#totParams}}Args:     cobra.ExactArgs({{totParams}}),{{/totParams}}
  {{#exampleUse}}Example:  "{{{exampleUse}}}", {{/exampleUse}}
  Run: func(cmd *cobra.Command, args []string) {
    {{#hasPathParams}}
    i := -1
    {{/hasPathParams}}

    {{#pathParams}}
    i++
    {{paramName}} := args[i]
    {{/pathParams}}

    {{#bodyParam}}
    {{!TODO: For now, I support only primite types}}
    {{#isString}}
    {{paramName}}, err := cmd.Flags().GetString("value")
    if err != nil {
      fmt.Println("Error!!!")
      fmt.Println(cmd.UsageString())
      return
    }
    {{/isString}}
    {{#isInteger}}
    {{paramName}}, err1 := cmd.Flags().GetInt("value")
    if err1 != nil {
      fmt.Println("Error!!!")
      fmt.Println(cmd.UsageString())
      return
    }
    {{/isInteger}}
    {{/bodyParam}}

    {{! TODO: This is the main method where we make the request}}
    fmt.Printf("PUT {{pathToPrint}}"{{#pathParams}}, {{paramName}}{{/pathParams}})
    {{#bodyParam}}
    {{!TODO: For now, I support only primite types}}
    {{#isString}}
    fmt.Printf("\n")
    fmt.Println("Value ", {{paramName}})
    {{/isString}}
    {{#isInteger}}
    fmt.Printf("\n")
    fmt.Println("Value ", {{paramName}})
    {{/isInteger}}
    {{/bodyParam}}
  },
}

{{/vendorExtensions.x-cliParam}}
{{/isRestfulUpdate}}
{{/operation}}

func init() {
{{#operation}}
  {{#isRestfulUpdate}}
    {{#vendorExtensions.x-cliParam}}
{{parentCommand}}.AddCommand({{commandName}})
      {{#paramKeys}}
{{commandName}}.AddParameter("{{key}}")
      {{/paramKeys}}
  {{#bodyParam}}
    {{!TODO: For now, I support only primite types}}
    {{#isString}}
{{commandName}}.Flags().String("value", "{{example}}", "{{description}}")
    {{/isString}}
    {{#isInteger}}
{{commandName}}.Flags().Int("value", {{example}}, "{{description}}")
    {{/isInteger}}
  {{/bodyParam}}

    {{/vendorExtensions.x-cliParam}}
    {{/isRestfulUpdate}}
{{/operation}}
}

{{/operations}}
