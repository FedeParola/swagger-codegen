/**
* Swagger Petstore
* This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "UserApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

UserApi::UserApi(Net::Address addr)
    : httpEndpoint(std::make_shared<Net::Http::Endpoint>(addr))
{ };

void UserApi::init(size_t thr = 2) {
    auto opts = Net::Http::Endpoint::options()
        .threads(thr)
        .flags(Net::Tcp::Options::InstallSignalHandler);
    httpEndpoint->init(opts);
    setupRoutes();
}

void UserApi::start() {
    httpEndpoint->setHandler(router.handler());
    httpEndpoint->serve();
}

void UserApi::shutdown() {
    httpEndpoint->shutdown();
}

void UserApi::setupRoutes() {
    using namespace Net::Rest;

    Routes::Post(router, base + "/user", Routes::bind(&UserApi::create_user_handler, this));
    Routes::Post(router, base + "/user/createWithArray", Routes::bind(&UserApi::create_users_with_array_input_handler, this));
    Routes::Post(router, base + "/user/createWithList", Routes::bind(&UserApi::create_users_with_list_input_handler, this));

    Routes::Put(router, base + "/user/:username", Routes::bind(&UserApi::update_user_handler, this));

    Routes::Get(router, base + "/user/:username", Routes::bind(&UserApi::get_user_by_name_handler, this));
    Routes::Get(router, base + "/user/login", Routes::bind(&UserApi::login_user_handler, this));
    Routes::Get(router, base + "/user/logout", Routes::bind(&UserApi::logout_user_handler, this));

    Routes::Delete(router, base + "/user/:username", Routes::bind(&UserApi::delete_user_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&UserApi::_default_handler, this));
}

void UserApi::create_user_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
      this->create_user(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Net::Http::Code::Bad_Request, e.what());
      return;
    }

}

void UserApi::create_users_with_array_input_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
      this->create_users_with_array_input(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Net::Http::Code::Bad_Request, e.what());
      return;
    }

}

void UserApi::create_users_with_list_input_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
      this->create_users_with_list_input(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Net::Http::Code::Bad_Request, e.what());
      return;
    }

}

void UserApi::delete_user_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
      this->delete_user(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Net::Http::Code::Bad_Request, e.what());
      return;
    }

}

void UserApi::get_user_by_name_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
      this->get_user_by_name(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Net::Http::Code::Bad_Request, e.what());
      return;
    }

}

void UserApi::login_user_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
      this->login_user(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Net::Http::Code::Bad_Request, e.what());
      return;
    }

}

void UserApi::logout_user_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
      this->logout_user(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Net::Http::Code::Bad_Request, e.what());
      return;
    }

}

void UserApi::update_user_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
      this->update_user(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Net::Http::Code::Bad_Request, e.what());
      return;
    }

}


void _default_handler(const Net::Rest::Request &request, Net::Http::ResponseWriter response) {
    response.send(Net::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

